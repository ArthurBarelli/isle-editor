{
  "Accordion": {
    "props": [
      {
        "name": "active",
        "type": "number",
        "description": "index of slider to be opened at the beginning",
        "default": 0
      },
      {
        "name": "headers",
        "type": "array<string>",
        "description": "array of header names",
        "default": null
      },
      {
        "name": "headerStyle",
        "type": "object",
        "description": "one may also assign a style to the header bars",
        "default": null
      },
      {
        "name": "headerClassName",
        "type": "string",
        "description": "this overrules the given className of the headers",
        "default": null
      }
    ],
    "description": "An accordion component controlling vertical sliders."
  },
  "Animated": {
    "props": [
      {
        "name": "in",
        "type": "object",
        "description": "the style which is applied at the beginning",
        "default": {}
      },
      {
        "name": "over",
        "type": "object",
        "description": "mouseOver style",
        "default": {}
      },
      {
        "name": "out",
        "type": "object",
        "description": "mouseOut style",
        "default": {}
      },
      {
        "name": "preset",
        "type": "string",
        "description": "name of the preset",
        "default": ""
      }
    ],
    "description": "An ISLE component that allows to apply animation on components and child elements."
  },
  "Background": {
    "props": [
      {
        "name": "images",
        "type": "array<string>",
        "description": "list of image URLs to be displayed",
        "default": []
      },
      {
        "name": "time",
        "type": "number",
        "description": "duration each background image is displayed (in seconds)",
        "default": 3
      },
      {
        "name": "in",
        "type": "string",
        "description": "entrance effect name (either `fade-in`, `slide-left-in`, and `flip-hor-bottom-in`)",
        "default": "fade-in"
      },
      {
        "name": "out",
        "type": "string",
        "description": "exit effect name (either `fade-out`, `slide-right-out`, and `flip-hor-bottom-out`)",
        "default": "fade-out"
      },
      {
        "name": "parent",
        "type": "boolean",
        "description": "sets the parent divs backgroundColor to transparent, overflow to hidden",
        "default": false
      },
      {
        "name": "inTime",
        "type": "number",
        "description": "length of the enter effect (in seconds)",
        "default": 1
      },
      {
        "name": "outTime",
        "type": "number",
        "description": "length of the exit effect (in seconds)",
        "default": 1
      }
    ],
    "description": "A dynamic background component that changes a background image at a specified interval."
  },
  "BeaconTooltip": {
    "props": [
      {
        "name": "title",
        "type": "(string|node)",
        "description": "title to be displayed at the top of the tooltip",
        "default": null
      },
      {
        "name": "content",
        "type": "(string|node)",
        "description": "tooltip content",
        "default": "`content` comes here..."
      },
      {
        "name": "event",
        "type": "string",
        "description": "if set to `click`, tooltip is toggled when clicking on beacon; if set to `hover`, the tooltip is activated via hovering",
        "default": "click"
      },
      {
        "name": "placement",
        "type": "string",
        "description": "placement of the tooltip relative to `target` (either `top`, `top-start`, `top-end`, `bottom`, `bottom-end`, `left`, `left-start`, `left-end`, `right`, `right-start`, `right-end`, `auto`, or `center`)",
        "default": "left"
      },
      {
        "name": "target",
        "type": "string",
        "description": "class or ID selector for element to attach tooltip to",
        "default": ""
      },
      {
        "name": "offset",
        "type": "number",
        "description": "distance between the tooltip and `target` in pixels",
        "default": 15
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked upon state change of the tooltip. Receives two arguments: the `action` (`open` or `close`) and the passed `props`",
        "default": "onChange() {}"
      }
    ],
    "description": "Component placing a beacon in the lesson, either independently or attached to a `target`. Upon hovering or clicking on the beacon, a tooltip is displayed."
  },
  "Calculator": {
    "props": [
      {
        "name": "expandable",
        "type": "boolean",
        "default": true
      },
      {
        "name": "show",
        "type": "boolean",
        "default": true
      },
      {
        "name": "style",
        "type": "object",
        "default": {}
      },
      {
        "name": "onHide",
        "type": "function",
        "default": null
      }
    ],
    "description": "Description is missing."
  },
  "undefined": {
    "props": [],
    "description": "Description is missing."
  },
  "Clock": {
    "props": [
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "duration",
        "type": "boolean",
        "description": "if set the duration of the session is display (not the actual time)",
        "default": false
      },
      {
        "name": "format",
        "type": "string",
        "description": "time format (either `HH:MM`, `HH:MM:SS`, or `HH:MM:SSS`)",
        "default": ""
      }
    ],
    "description": "Clock component displaying the current time."
  },
  "Collapse": {
    "props": [
      {
        "name": "header",
        "type": "string",
        "description": "header string",
        "default": "Header"
      },
      {
        "name": "headerStyle",
        "type": "object",
        "description": "one may also assign a style to the header bar",
        "default": null
      },
      {
        "name": "headerClassName",
        "type": "string",
        "description": "this overrules the given className of the header",
        "default": null
      },
      {
        "name": "defaultVisible",
        "type": "boolean",
        "description": "if set, the body is visible right from the start",
        "default": false
      },
      {
        "name": "visible",
        "type": "boolean",
        "description": "controls whether slider is visible; turns it into a controlled component where state needs to be handled externally",
        "default": null
      },
      {
        "name": "onClick",
        "type": "function",
        "default": "onClick() {}"
      }
    ],
    "description": "An ISLE component that allows to slideDown and slideUp - JQuery style."
  },
  "ColorPicker": {
    "props": [
      {
        "name": "color",
        "type": "(string|object)",
        "description": "`string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one",
        "default": "#fff"
      },
      {
        "name": "disableAlpha",
        "type": "boolean",
        "description": "controls whether to remove alpha slider and options",
        "default": false
      },
      {
        "name": "presetColors",
        "type": "array<string>",
        "description": "HeX `strings` specifying the default colors at the bottom of the colorpicker",
        "default": [
          "#D0021B",
          "#F5A623",
          "#F8E71C",
          "#8B572A",
          "#7ED321",
          "#417505",
          "#BD10E0",
          "#9013FE",
          "#4A90E2",
          "#50E3C2",
          "#B8E986",
          "#000000",
          "#4A4A4A",
          "#9B9B9B",
          "#FFFFFF"
        ]
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the colorpicker (in px)",
        "default": 200
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time color is changed",
        "default": "onChange() {}"
      },
      {
        "name": "onChangeComplete",
        "type": "function",
        "description": "callback invoked once a color change is complete",
        "default": "onChangeComplete() {}"
      }
    ],
    "description": "A wrapper for the [react-color](https://casesandberg.github.io/react-color/) colorpicker."
  },
  "Container": {
    "props": [
      {
        "name": "fluid",
        "type": "boolean",
        "description": "turn any fixed-width container layout into a full-width layout",
        "default": true
      }
    ],
    "description": "Container wrapper."
  },
  "DensityPlot": {
    "props": [
      {
        "name": "bandwidth",
        "type": "number",
        "description": " smoothing parameter for the kernel density estimator",
        "default": 4
      },
      {
        "name": "histogram",
        "type": "boolean",
        "description": "show a histogram alongside the density plot",
        "default": true
      },
      {
        "name": "nBins",
        "type": "number",
        "description": "number of bins for the overlaid histogram.",
        "default": 8
      },
      {
        "name": "vline",
        "type": "object",
        "description": "if supplied, will display a vertical line at the supplied `value` with a given `label`"
      },
      {
        "name": "xlab",
        "type": "string",
        "description": "x-axis label",
        "default": "value"
      },
      {
        "name": "xmax",
        "type": "number",
        "description": "maximum value displayed on the x-axis",
        "default": 1
      },
      {
        "name": "xmin",
        "type": "number",
        "description": "minimum value displayed on the x-axis",
        "default": 0
      },
      {
        "name": "ymax",
        "type": "number",
        "description": "maximum value displayed on the y-axis",
        "default": 0.15
      }
    ],
    "description": "A d3-based density plot component."
  },
  "NetworkPlot": {
    "props": [
      {
        "name": "width",
        "type": "number",
        "description": "width of the plot (in px)",
        "default": 900
      },
      {
        "name": "height",
        "type": "number",
        "description": "height of the plot (in px)",
        "default": 600
      }
    ],
    "description": "A d3-based network plot."
  },
  "Dashboard": {
    "props": [
      {
        "name": "autoStart",
        "type": "boolean",
        "description": "if set to `true`, the `onGenerate` function is executed at startup with the default input values",
        "default": true
      },
      {
        "name": "autoUpdate",
        "type": "boolean",
        "description": "controls whether the `onGenerate` function should be invoked automatically when one of the child input fields changes",
        "default": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "dashboard description",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the dashboard shall be disabled",
        "default": false
      },
      {
        "name": "label",
        "type": "string",
        "description": "button label",
        "default": "Generate"
      },
      {
        "name": "maxWidth",
        "type": "number",
        "description": "maximum width of dashboard",
        "default": 600
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onGenerate",
        "type": "function",
        "description": "function invoked when the button is clicked or one of the dashboard input values changes (if `autoUpdate` is set to `true`). The function is called with the values of the input fields, in the order in which they are placed in the dashboard",
        "default": "onGenerate() {}"
      },
      {
        "name": "title",
        "type": "(string|node)",
        "description": "card title",
        "default": ""
      }
    ],
    "description": "A dashboard for combining the handling of multiple child input fields."
  },
  "DataExplorer": {
    "props": [
      {
        "name": "categorical",
        "type": "array",
        "description": "array of strings indicating the name of each categorical variable",
        "default": []
      },
      {
        "name": "continuous",
        "type": "array",
        "description": "array of strings indicating the name of each continuous variable",
        "default": []
      },
      {
        "name": "data",
        "type": "object",
        "description": "data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column. If you wish to allow students the ability to import a `.csv` file, set the `data` option to be `false`",
        "default": {}
      },
      {
        "name": "dataInfo",
        "type": "object",
        "description": "object containing the keys \\'name\\', whose value is a string, \\'info\\', whose value is an array of strings in which each element in the array is a new line and \\'variables\\', an object with keys as variable names and values as variable descriptions",
        "default": {
          "info": "",
          "name": "",
          "variables": null
        }
      },
      {
        "name": "distributions",
        "type": "array",
        "description": "array of strings indicating distributions that may be used in calculating probabilities. This functionality exists independently of the dataset provided. Currently limited to normal, uniform and exponential distributions",
        "default": [
          "Normal",
          "Uniform",
          "Exponential"
        ]
      },
      {
        "name": "editorProps",
        "type": "object",
        "description": "object to be passed to `MarkdownEditor` indicating properties to be used",
        "default": null
      },
      {
        "name": "editorTitle",
        "type": "string",
        "description": "string indicating the title of the explorer to be displayed",
        "default": "Report"
      },
      {
        "name": "hideDataTable",
        "type": "boolean",
        "description": "boolean value indicating whether to hide the data table from view",
        "default": false
      },
      {
        "name": "histogramDensities",
        "type": "boolean",
        "description": "boolean value indicating whether to display histogram densities",
        "default": true
      },
      {
        "name": "models",
        "type": "array",
        "description": "array of strings indicating models that may be fit on the data",
        "default": [
          "Simple Linear Regression"
        ]
      },
      {
        "name": "opened",
        "type": "string",
        "description": "page opened at startup",
        "default": null
      },
      {
        "name": "plots",
        "type": "array",
        "description": "array of strings indicating which plots to show to the user",
        "default": [
          "Bar Chart",
          "Pie Chart",
          "Histogram",
          "Box Plot",
          "Scatterplot",
          "Heat Map",
          "Mosaic Plot",
          "Contour Chart"
        ]
      },
      {
        "name": "questions",
        "type": "node",
        "description": "node indicating surrounding text and question components to be displayed in a tabbed window",
        "default": null
      },
      {
        "name": "showEditor",
        "type": "boolean",
        "description": "boolean indicating whether to show the editor to the user",
        "default": false
      },
      {
        "name": "showTestDecisions",
        "type": "boolean",
        "description": "boolean indicating whether to show the decisions made for each test based on the calculated p-values",
        "default": true
      },
      {
        "name": "statistics",
        "type": "array",
        "description": "array of strings indicating which summary statistics may be calculated",
        "default": [
          "Mean",
          "Median",
          "Min",
          "Max",
          "Range",
          "Interquartile Range",
          "Standard Deviation",
          "Variance",
          "Correlation"
        ]
      },
      {
        "name": "tables",
        "type": "array",
        "description": "array of strings indicating which tables may be created from the data",
        "default": [
          "Frequency Table",
          "Contingency Table"
        ]
      },
      {
        "name": "tabs",
        "type": "array",
        "description": "array of objects and keys indicating any custom tabs to add",
        "default": []
      },
      {
        "name": "tests",
        "type": "array",
        "description": "array of strings indicating which hypothesis tests to include",
        "default": [
          "One-Sample Mean Test",
          "One-Sample Proportion Test",
          "Two-Sample Mean Test",
          "Two-Sample Proportion Test",
          "Correlation Test",
          "Chi-squared Independence Test",
          "One-Way ANOVA"
        ]
      },
      {
        "name": "transformer",
        "type": "boolean",
        "description": "boolean indicating whether one wants to display a variable transformer",
        "default": false
      }
    ],
    "description": "Generates a string displaying the filters for the current active data subset."
  },
  "DataTable": {
    "props": [
      {
        "name": "data",
        "type": "(array|object) (required)",
        "description": "A data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column"
      },
      {
        "name": "dataInfo",
        "type": "object",
        "description": "object with `info` string array describing the data set, the `name` of the dataset, an `object` of `variables` with keys corresponding to variable names and values to variable descriptions, an a `showOnStartup` boolean controlling whether to display the info modal on startup",
        "default": {
          "info": [],
          "name": "",
          "variables": null,
          "showInfo": false
        }
      },
      {
        "name": "onClickRemove",
        "type": "function",
        "description": "A function specifying an action to take for rows removed from the data (defaults to an empty function)",
        "default": "onClickRemove() {}"
      },
      {
        "name": "filters",
        "type": "array",
        "default": []
      },
      {
        "name": "onFilteredChange",
        "type": "function",
        "default": "onFilteredChange() {}"
      },
      {
        "name": "showRemove",
        "type": "boolean",
        "description": "indicates whether to display checkboxes for rows to be removed",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "An object allowing for custom css styling. Defaults to an empty object",
        "default": {}
      }
    ],
    "description": "A component rendering data in a tabular display. Built on top of [react-table](https://react-table.js.org/)."
  },
  "DateDisplay": {
    "props": [],
    "description": "Description is missing."
  },
  "DraggableGrid": {
    "props": [
      {
        "name": "isDraggable",
        "type": "boolean",
        "description": "controls whether grid elements are draggable",
        "default": false
      },
      {
        "name": "isResizable",
        "type": "boolean",
        "description": "controls whether grid elements are resizable",
        "default": false
      },
      {
        "name": "rowHeight",
        "type": "number",
        "description": "height of a single row (in px)",
        "default": 60
      }
    ],
    "description": "A responsive draggable grid layout."
  },
  "DraggableList": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "array of objects with `id` and `text` keys"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked with newly ordered data array on each change",
        "default": "onChange(){}"
      },
      {
        "name": "onInit",
        "type": "function",
        "description": "callback function invoked after mounting of component",
        "default": "onInit(){}"
      },
      {
        "name": "shuffle",
        "type": "boolean",
        "description": "controls whether data elements should be shuffled in initial display",
        "default": false
      }
    ],
    "description": "A list of draggable elements that can be re-ordered by the students."
  },
  "EnlargeableGrid": {
    "props": [
      {
        "name": "enlargeable",
        "type": "boolean",
        "description": "controls whether items can be enlarged",
        "default": true
      },
      {
        "name": "enlargedHeight",
        "type": "number",
        "description": "height of item after enlarging it",
        "default": 18
      },
      {
        "name": "isDraggable",
        "type": "boolean",
        "description": "controls whether the grid elements are draggable",
        "default": false
      },
      {
        "name": "isResizable",
        "type": "boolean",
        "description": "controls whether the grid elements are resizable",
        "default": false
      },
      {
        "name": "itemHeight",
        "type": "number",
        "description": "height of items (in px)",
        "default": 9
      }
    ],
    "description": "An enlargeable grid."
  },
  "Expire": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the counter should be active",
        "default": false
      },
      {
        "name": "delay",
        "type": "number",
        "description": "number of milliseconds before component disappears",
        "default": 1000
      }
    ],
    "description": "The expire component will cause all of its children to become invisible after a specified amount of time."
  },
  "FeedbackButtons": {
    "props": [
      {
        "name": "id",
        "type": "string (required)"
      },
      {
        "name": "confusedMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for confused button",
        "default": "I am confused."
      },
      {
        "name": "feedbackMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for detailed feedback button",
        "default": "I have feedback."
      },
      {
        "name": "understoodMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for understood button",
        "default": "Makes sense."
      },
      {
        "name": "vertical",
        "type": "boolean",
        "description": "buttons are displayed vertically if set to `true`",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "Buttons to collect user feedback."
  },
  "FlippableCard": {
    "props": [
      {
        "name": "button",
        "type": "string",
        "description": "button label",
        "default": null
      },
      {
        "name": "cardStyles",
        "type": "{container,front,back}",
        "description": "allows to override the given styles",
        "default": {
          "container": {},
          "front": {},
          "back": {}
        }
      },
      {
        "name": "flipSpeedBackToFront",
        "type": "number",
        "description": "the speed by which the card turns from background to foreground, in seconds",
        "default": 1
      },
      {
        "name": "flipSpeedFrontToBack",
        "type": "number",
        "description": "{number} the speed by which the card turns from foreground to background, in seconds",
        "default": 1
      },
      {
        "name": "isFlipped",
        "type": "boolean",
        "description": "initial flip state of the card",
        "default": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked once the card is flipped; receives the current flipped status as its sole argument",
        "default": "onChange() {}"
      },
      {
        "name": "oneTime",
        "type": "boolean",
        "description": "indicates whether the flip process may be executed just once",
        "default": false
      },
      {
        "name": "perspective",
        "type": "number",
        "description": "CSS property value to give 3d-positioned element a perspective",
        "default": 1000
      },
      {
        "name": "value",
        "type": "boolean"
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "default": false
      }
    ],
    "description": "An ISLE component that allows two render two-sides."
  },
  "FreeTextQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "the question displayed at the top of the free text question component",
        "default": ""
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "top"
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "solution",
        "type": "string",
        "description": "a model answer to the problem",
        "default": ""
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of rows of the text field for students to type their answers",
        "default": 5
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether to enable group chat should for the question",
        "default": false
      },
      {
        "name": "resizable",
        "type": "boolean",
        "description": "controls whether the text area should be resizable",
        "default": false
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "placeholder text displayed before user has entered any text",
        "default": "Enter your answer here..."
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "submissionMsg",
        "type": "string",
        "description": "notification displayed when the learner first submits his answer",
        "default": ""
      },
      {
        "name": "resubmissionMsg",
        "type": "string",
        "description": "notification displayed for all submissions after the first one",
        "default": "You have successfully re-submitted your answer."
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "default": true
      },
      {
        "name": "maxlength",
        "type": "number",
        "description": "maximum allowed number of characters",
        "default": 2500
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time the text area value changes; receives the current text as its sole argument",
        "default": "onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when user submits an answer; receives the submitted text as its sole argument",
        "default": "onSubmit() {}"
      }
    ],
    "description": "An ISLE component for questions where answers by students should be supplied in the form of free text."
  },
  "FreeTextSurvey": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "component identifier"
      },
      {
        "name": "question",
        "type": "string",
        "description": "the question to ask the students",
        "default": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one wishes to allow students to answer the survey multiple times",
        "default": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "controls whether student answers are anonymized",
        "default": false
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of text rows in the input field",
        "default": 4
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function called when an answer is submitted",
        "default": "onSubmit() {}"
      }
    ],
    "description": "An ISLE component for questions where the answers by the students should be supplied in the form of free text. What differentiates this component from the **FreeTextQuestion** is the fact that the aggregated group data is displayed to everyone in real-time."
  },
  "Gate": {
    "props": [
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "when set the gated content is displayed to anybody",
        "default": false
      },
      {
        "name": "user",
        "type": "boolean",
        "description": "when set the gated content is displayed to subscribed users",
        "default": false
      },
      {
        "name": "enrolled",
        "type": "boolean",
        "description": "when set the gated content is displayed to the students enrolled in the course",
        "default": false
      },
      {
        "name": "owner",
        "type": "boolean",
        "description": "when set the gated content is displayed to the owner of the course (usually the instructor)",
        "default": false
      },
      {
        "name": "banner",
        "type": "node",
        "description": "a message which is visible to the visitors lacking the gate privilege",
        "default": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "if a gate is disabled, the banner will be displayed no matter what",
        "default": false
      }
    ],
    "description": "An ISLE component that allows to display its children only to reserved audiences."
  },
  "Generator": {
    "props": [
      {
        "name": "buttonLabel",
        "type": "string",
        "default": "Generate"
      },
      {
        "name": "onGenerate",
        "type": "function (required)"
      }
    ],
    "description": "A component for generating other components (e.g., automatically generated questions)."
  },
  "HandwrittenNote": {
    "props": [
      {
        "name": "style",
        "type": "object",
        "default": {}
      },
      {
        "name": "formStyle",
        "type": "object",
        "default": {}
      },
      {
        "name": "text",
        "type": "string",
        "default": "handwritten Note"
      },
      {
        "name": "type",
        "type": "string",
        "description": "button type, passed to the native React button",
        "default": "handwritten-form-egg"
      }
    ],
    "description": "A component displaying an image in the style of a polaroid."
  },
  "IFrame": {
    "props": [
      {
        "name": "src",
        "type": "string (required)",
        "description": "source URL"
      }
    ],
    "description": "An iFrame component."
  },
  "CheckboxInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the checkbox value to be assigned to",
        "default": ""
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "description": "A boolean value indicating the default value of the checkbox",
        "default": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "indicates whether the input is active or not",
        "default": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the checkbox is displayed inline",
        "default": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value",
        "default": "onChange() {}"
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "text displayed next to the checkbox",
        "default": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "Input": {
    "props": [],
    "description": "Description is missing."
  },
  "NumberInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "default": ""
      },
      {
        "name": "defaultValue",
        "type": "number",
        "description": "value indicating the default value of the input at startup",
        "default": 0
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "boolean indicating whether the input is active or not",
        "default": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the input is displayed inline",
        "default": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "string indicating the text displayed next to the number input",
        "default": ""
      },
      {
        "name": "max",
        "type": "number",
        "description": "number indicating the maximum value that may be inserted",
        "default": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "number indicating the smallest possible value that may be inserted",
        "default": null
      },
      {
        "name": "numbersOnly",
        "type": "boolean",
        "description": "controls whether only numbers are accepted",
        "default": true
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "callback function to be invoked when using a blur method",
        "default": "onBlur() {}"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when number input is changed",
        "default": "onChange() {}"
      },
      {
        "name": "onKeyDown",
        "type": "function",
        "description": "callback function to be invoked when any key is pressed down",
        "default": "onKeyDown() {}"
      },
      {
        "name": "onKeyPress",
        "type": "function",
        "description": "callback function to be invoked when any key is entered",
        "default": "onKeyPress() {}"
      },
      {
        "name": "onKeyUp",
        "type": "function",
        "description": "callback function to be invoked when key is released",
        "default": "onKeyUp() {}"
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "number indicating the incremental changes when using the increment arrows",
        "default": 1
      },
      {
        "name": "value",
        "type": "number",
        "description": "number value (for controlled component)",
        "default": null
      },
      {
        "name": "width",
        "type": "number",
        "description": "number indicating the width of the input bar in pixels",
        "default": 80
      }
    ],
    "description": "A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "ProportionsInput": {
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the input field is deactivated",
        "default": false
      },
      {
        "name": "height",
        "type": "number",
        "description": "proportions input height (in px)",
        "default": 200
      },
      {
        "name": "innerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart (in px)",
        "default": 75
      },
      {
        "name": "legends",
        "type": "array",
        "description": "group labels",
        "default": null
      },
      {
        "name": "margin",
        "type": "string",
        "description": "proportion input margin (in px)"
      },
      {
        "name": "nElements",
        "type": "number",
        "description": "number of elements",
        "default": 6
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when a choice is made",
        "default": "onChange(){}"
      },
      {
        "name": "precision",
        "type": "number",
        "description": "displayed precision of proportion values",
        "default": 1
      },
      {
        "name": "step",
        "type": "number",
        "description": "the step of the arrows seen when hovering the cursor above the input box",
        "default": 0.1
      }
    ],
    "description": "A proportions input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "SelectInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "default": ""
      },
      {
        "name": "clearable",
        "type": "boolean",
        "description": "boolean value indicating whether one may clear choice(s) made"
      },
      {
        "name": "defaultValue",
        "type": "(number|string|array)",
        "description": "default value of the input at startup",
        "default": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the input is active or not",
        "default": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the input is displayed inline",
        "default": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "text displayed next to the input",
        "default": ""
      },
      {
        "name": "menuPlacement",
        "type": "string",
        "description": "placement of the menu in relation to the control (either `auto`, `top`, or `bottom`)",
        "default": "auto"
      },
      {
        "name": "multi",
        "type": "boolean",
        "description": "controls whether one may select multiple answers",
        "default": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when a choice is made",
        "default": "onChange() {}"
      },
      {
        "name": "options",
        "type": "array",
        "description": "array of indicating the choices available the user",
        "default": []
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "value to be displayed before an initial choice is made",
        "default": "Select..."
      }
    ],
    "description": "A select input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "SliderInput": {
    "props": [
      {
        "name": "defaultValue",
        "type": "number",
        "description": "The starting value of the slider",
        "default": 10
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit greyed-out",
        "default": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether to place the slider inline with text or outside",
        "default": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "caption of the input",
        "default": null
      },
      {
        "name": "max",
        "type": "number",
        "description": "The maximum value of the slider",
        "default": 100
      },
      {
        "name": "min",
        "type": "number",
        "description": "The minimum value of the slider",
        "default": 0
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked with the new value when the slider value changes",
        "default": "onChange() {}"
      },
      {
        "name": "precision",
        "type": "number",
        "description": "rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001",
        "default": 10
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the slider",
        "default": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "TextArea": {
    "props": [
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default value of the text area",
        "default": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": "text value (for controlled component)",
        "default": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the text area shall be disabled",
        "default": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "legend text",
        "default": ""
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "callback function invoked when the text area loses focus",
        "default": "onBlur() {}"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function invoked with the new text when the area text changes",
        "default": "onChange() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "placeholder text",
        "default": "Enter text"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "description": "controls whether the text area shall be resizable",
        "default": false
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of rows",
        "default": 5
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute."
  },
  "TextInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "default": null
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "A value indicating the default value of the input at start",
        "default": ""
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "A string indicating the text displayed next to the number input",
        "default": ""
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "Indicates whether the input is displayed inline",
        "default": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "A function to be called when a text value is changed",
        "default": "onChange(){}"
      },
      {
        "name": "onKeyDown",
        "type": "function",
        "description": "callback function to be invoked when any key is pressed down",
        "default": "onKeyDown() {}"
      },
      {
        "name": "onKeyPress",
        "type": "function",
        "description": "callback function to be invoked when any key is entered",
        "default": "onKeyPress() {}"
      },
      {
        "name": "onKeyUp",
        "type": "function",
        "description": "callback function to be invoked when key is released",
        "default": "onKeyUp() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "A string indicating the value to be displayed before an initial choice is made",
        "default": "Enter text"
      },
      {
        "name": "width",
        "type": "number",
        "description": "A number indicating the width of the input in pixels",
        "default": 80
      }
    ],
    "description": "A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "VoiceInput": {
    "props": [
      {
        "name": "autorecord",
        "type": "boolean",
        "description": "controls whether to automatically start recording",
        "default": false
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default text value",
        "default": ""
      },
      {
        "name": "grammars",
        "type": "array",
        "description": "speech grammar list (unsupported)",
        "default": []
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "default": "en-US"
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "legend displayed in front of input field",
        "default": ""
      },
      {
        "name": "mode",
        "type": "string",
        "description": "set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands",
        "default": "full"
      },
      {
        "name": "maxAlternatives",
        "type": "number",
        "description": "maximum number of alternatives provided per speech recognition result",
        "default": 1
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function invoked when text input value is updated",
        "default": "onChange() {}"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when clicking on the microphone button",
        "default": "onClick() {}"
      },
      {
        "name": "onFinalText",
        "type": "function",
        "description": "callback function invoked once final text is received",
        "default": "onFinalText() {}"
      },
      {
        "name": "onRecordingStart",
        "type": "function",
        "description": "callback function invoked when recording is started",
        "default": "onRecordingStart() {}"
      },
      {
        "name": "onRecordingStop",
        "type": "function",
        "description": "callback function invoked once recording is stopped",
        "default": "onRecordingStop() {}"
      },
      {
        "name": "onSegment",
        "type": "function",
        "description": "callback function invoked with text segments",
        "default": "onSegment() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function when submitting text input value by hitting \"Enter\"",
        "default": "onSubmit() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "text input placeholder",
        "default": "Enter text"
      },
      {
        "name": "remote",
        "type": "object",
        "description": "object with `start`, `stop`, and `toggle` and associated hotkeys",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "timeout",
        "type": "number",
        "description": "number of milliseconds after which to timeout the recording",
        "default": null
      },
      {
        "name": "stopTooltip",
        "type": "string",
        "description": "tooltip message desplayed while recording",
        "default": "Click to stop recording"
      },
      {
        "name": "startTooltip",
        "type": "string",
        "description": "tooltip message desplayed while not recording",
        "default": "Click to start recording"
      },
      {
        "name": "tooltipPlacement",
        "type": "string",
        "description": "direction of the tooltip",
        "default": "left"
      },
      {
        "name": "width",
        "type": "number",
        "description": "voice input width (in px)",
        "default": 500
      },
      {
        "name": "height",
        "type": "number",
        "description": "voice input height (in px)",
        "default": 36
      }
    ],
    "description": "A voice input component."
  },
  "Joyride": {
    "props": [
      {
        "name": "run",
        "type": "boolean",
        "description": "controls whether the guide is active",
        "default": false
      },
      {
        "name": "steps",
        "type": "array (required)",
        "description": "array of step `objects`"
      }
    ],
    "description": "Wrapper around [react-joyride](https://github.com/gilbarbara/react-joyride) to create walkthroughs and guided tours."
  },
  "JSShell": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "JavaScript code to be evaluated",
        "default": ""
      },
      {
        "name": "solution",
        "type": "string",
        "description": "for programming questions, code `string` representing the official solution for the problem",
        "default": ""
      },
      {
        "name": "hints",
        "type": "array",
        "description": "for programming questions, an array of hints providing guidance on how to approach the problem",
        "default": []
      },
      {
        "name": "precompute",
        "type": "boolean",
        "description": "controls whether the default code should be executed once the component has mounted",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether group chat functionality should be enabled",
        "default": false
      },
      {
        "name": "check",
        "type": "string",
        "description": "appended JavaScript code to check the `code` to be evaluated",
        "default": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether to disable all user inputs and make the code block static",
        "default": false
      },
      {
        "name": "lines",
        "type": "number",
        "description": "number of lines to display",
        "default": 5
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever the text field input changes",
        "default": "onChange() {}"
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "callback invoked whenever the `Evaluate` button is clicked",
        "default": "onEvaluate() {}"
      },
      {
        "name": "vars",
        "type": "object",
        "description": "scope object with variables that should be made available to evaluated `code`",
        "default": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      }
    ],
    "description": "An interactive Javascript shell that can be used to execute JavaScript commands. The shell contains a console that displays error messages, warnings etc."
  },
  "KeyControls": {
    "props": [
      {
        "name": "actions",
        "type": "object<function>",
        "description": "object mapping key codes to events",
        "default": {}
      },
      {
        "name": "container",
        "type": "node",
        "description": "DOM node for which to attach event listeners",
        "default": null
      }
    ],
    "description": "Keyboard controls."
  },
  "LearnContinuousCLT": {
    "props": [
      {
        "name": "distributions",
        "type": "array<string>",
        "default": [
          "uniform",
          "exponential",
          "normal"
        ]
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) for a chosen continuous distribution."
  },
  "LearnDiscreteCLT": {
    "props": [],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) for a canonical discrete distribution, the binomial distribution."
  },
  "LearnSampleCLT": {
    "props": [
      {
        "name": "data",
        "type": "array (required)"
      },
      {
        "name": "populationProbabilities",
        "type": "boolean",
        "default": null
      },
      {
        "name": "variables",
        "type": "array (required)"
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set."
  },
  "LearnConditionalProbability": {
    "props": [
      {
        "name": "A",
        "type": "string (required)"
      },
      {
        "name": "B",
        "type": "string (required)"
      }
    ],
    "description": "A learning component illustrating conditional probability for two dependent binary variables."
  },
  "LearnConfidenceCoverageBinomial": {
    "props": [
      {
        "name": "sampleStats",
        "type": "boolean",
        "description": "controls whether one should be able to switch between using the sample proportion or the known population success probability when calculating the standard error",
        "default": true
      }
    ],
    "description": "A learning component illustrating coverage of confidence intervals for the mean of a binomial distribution."
  },
  "LearnConfidenceCoverageNormal": {
    "props": [
      {
        "name": "sampleStats",
        "type": "boolean",
        "description": "controls whether one should be able to switch between using the sample standard deviation or the known population standard deviation when calculating the standard error",
        "default": true
      }
    ],
    "description": "A learning component illustrating coverage of confidence intervals for the mean of a normal distribution."
  },
  "LearnCrossValidation": {
    "props": [],
    "description": "A visualization explaining cross-validation."
  },
  "LearnDiceThrowing": {
    "props": [],
    "description": "A learning component illustrating the law of large numbers using dice throwing."
  },
  "LearnBinomialDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "default": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a binomial distribution."
  },
  "LearnExponentialDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "default": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a exponential distribution."
  },
  "LearnNormalDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "default": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a normal distribution."
  },
  "LearnTDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "default": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a Student's t distribution."
  },
  "LearnUniformDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "default": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a uniform distribution."
  },
  "LearnMeanTest": {
    "props": [
      {
        "name": "types",
        "type": "array<string>",
        "default": [
          "One-Sample",
          "Two-Sample"
        ]
      }
    ],
    "description": "A learning component on hypothesis tests for a population mean."
  },
  "LearnProportionTest": {
    "props": [
      {
        "name": "types",
        "type": "array<string>",
        "default": [
          "One-Sample",
          "Two-Sample"
        ]
      }
    ],
    "description": "A learning component on hypothesis tests for a population proportion."
  },
  "LearnImagePixelPicker": {
    "props": [],
    "description": "A pixel color picker explaining RGB colors using example images."
  },
  "Learn": {
    "props": [],
    "description": "Description is missing."
  },
  "LearnMeanVSMedian": {
    "props": [
      {
        "name": "header",
        "type": "string",
        "description": "title of the panel in which the mean and the median will be generated",
        "default": "Measures of Location: Mean vs. Median"
      },
      {
        "name": "intro",
        "type": "node",
        "description": "any introductory material that may be needed",
        "default": null
      }
    ],
    "description": "An interactive game testing student's ability in detecting the median and mean of a given distribution."
  },
  "LearnStandardize": {
    "props": [
      {
        "name": "showProbabilities",
        "type": "boolean",
        "description": "controls whether to display the probabilities",
        "default": false
      },
      {
        "name": "step",
        "type": "object",
        "description": "step size of the scroll input",
        "default": "any"
      }
    ],
    "description": "Learning component explaining the process of standardizing data."
  },
  "LearnVennDiagramBuilder": {
    "props": [
      {
        "name": "nobs",
        "type": "number",
        "description": "total number of observations",
        "default": null
      },
      {
        "name": "three",
        "type": "boolean",
        "description": "controls whether to display three circles",
        "default": false
      }
    ],
    "description": "A venn diagram builder."
  },
  "LearnWordVennDiagram": {
    "props": [
      {
        "name": "height",
        "type": "number",
        "description": "height of the Venn diagram in pixels",
        "default": 350
      },
      {
        "name": "nTexts",
        "type": "number (required)",
        "description": "number of sources from which text was gathered"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback for what is to be done when \"Draw Venn Diagram\" is clicked",
        "default": "onClick() {}"
      },
      {
        "name": "tdm",
        "type": "array (required)",
        "description": "`array` that is to represent a [term document matrix](https://en.wikipedia.org/wiki/Document-term_matrix)"
      },
      {
        "name": "vocabulary",
        "type": "array (required)",
        "description": "`array` in the order of the `tdm` array passed so that the indices may be matches to their words"
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the Venn diagram in pixels",
        "default": 600
      }
    ],
    "description": "A venn diagram visualizing co-occurrence of words in documents of a supplied term-document matrix."
  },
  "LessonSubmit": {
    "props": [
      {
        "name": "label",
        "type": "string",
        "description": "label of submit button",
        "default": "Finish lesson"
      },
      {
        "name": "message",
        "type": "string",
        "description": "message for confirmation email",
        "default": ""
      },
      {
        "name": "sendConfirmationEmail",
        "type": "boolean",
        "description": "controls whether to send confirmation email upon lesson submission",
        "default": true
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking on the submission button",
        "default": "onClick() {}"
      }
    ],
    "description": "A button to be displayed at the end of a lesson for students to click on. By default, a message confirming completion of the lesson is sent to their email address."
  },
  "LikertScale": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question to be printed",
        "default": ""
      },
      {
        "name": "options",
        "type": "array",
        "description": "an array of five elements holding the labels for the different scale levels",
        "default": [
          "Strongly disagree",
          "Disagree",
          "Neither agree nor disagree",
          "Agree",
          "Strongly agree"
        ]
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      }
    ],
    "description": "A component showing a question and a five-point scale for students to answer."
  },
  "MarkdownEditor": {
    "props": [
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default text of the editor",
        "default": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      {
        "name": "sendSubmissionEmails",
        "type": "boolean",
        "description": "controls whether to send confirmation emails with PDF/HTML output upon submission",
        "default": true
      },
      {
        "name": "toolbarConfig",
        "type": "array",
        "description": "array of toolbar element identifiers to be displayed",
        "default": [
          "bold",
          "italic",
          "underline",
          "font_size",
          "new_line",
          "center",
          "|",
          "insert_table",
          "heading",
          "unordered_list",
          "ordered_list",
          "link",
          "insert_columns",
          "|",
          "title_insert",
          "preview",
          "side_by_side",
          "fullscreen",
          "|",
          "open_markdown",
          "save",
          "submit",
          "|",
          "guides"
        ]
      },
      {
        "name": "options",
        "type": "object",
        "description": "options passed to the SimpleMDE constructor, the package on which this component is based; see their documentation for available options",
        "default": {}
      },
      {
        "name": "autoSave",
        "type": "boolean",
        "description": "controls whether the editor should save the current text to the local storage of the browser at a given time interval",
        "default": true
      },
      {
        "name": "intervalTime",
        "type": "number",
        "description": "time between auto saves",
        "default": 60000
      },
      {
        "name": "voiceControl",
        "type": "boolean",
        "description": "controls whether voice input is enabled",
        "default": false
      },
      {
        "name": "voiceTimeout",
        "type": "number",
        "description": "time in milliseconds after a chunk of recorded voice input is inserted",
        "default": 5000
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "default": "en-US"
      },
      {
        "name": "peerReview",
        "type": "{submitButtonLabel,reviewButtonLabel}",
        "description": "if not null, enables peer review mode in which each submission is sent to another randomly chosen student and vice versa",
        "default": null
      },
      {
        "name": "plots",
        "type": "array",
        "default": []
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked when editor text changes; receives the current text as its sole argument",
        "default": "onChange() {}"
      }
    ],
    "description": "A markdown editor for writing notes or reports. Supports exporting of notes as HTML or PDF files, as well as automatic submission to the ISLE server."
  },
  "MatchListQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "question to be displayed at the top of the match list question component",
        "default": ""
      },
      {
        "name": "elements",
        "type": "array<{a,b}>",
        "description": "an `array` holding the correct pairs displayed at the top of the free text question component. Each `array` element must be an `object` with `a` and `b` properties",
        "default": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "bottom"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "showSolution",
        "type": "boolean",
        "description": "indicates whether the solution should be accessible after learners submit their answers",
        "default": true
      },
      {
        "name": "feedback",
        "type": "object",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "colorScale",
        "type": "array",
        "description": "if set, the supplied colors are used for the tiles",
        "default": null
      },
      {
        "name": "shuffle",
        "type": "string",
        "description": "specifies whether to shuffle the `left`, `right`, or `both` columns whose elements have to be matched",
        "default": "both"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "submissionMsg",
        "type": "string",
        "description": "notification displayed when the learner first submits his answer",
        "default": "You have successfully submitted your answer."
      },
      {
        "name": "resubmissionMsg",
        "type": "string",
        "description": "notification displayed for all submissions after the first one",
        "default": "You have successfully re-submitted your answer."
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when students submits an answer",
        "default": "onSubmit() {}"
      }
    ],
    "description": "An ISLE component that renders a question in which the learner has to match elements from two lists with each other in the correct way."
  },
  "Metrics": {
    "props": [
      {
        "name": "for",
        "type": "string (required)",
        "description": "ID of component whose actions should be retrieved"
      },
      {
        "name": "interval",
        "type": "number",
        "description": "interval at which to call the database; if falsy, retrievals have to be manually triggered by clicking on the displayed button",
        "default": null
      },
      {
        "name": "onData",
        "type": "function",
        "description": "callback function called with an array of all actions",
        "default": "onData() {}"
      }
    ],
    "description": "Component allowing retrieval of member actions corresponding to a specified component ID from the database."
  },
  "RealtimeMetrics": {
    "props": [
      {
        "name": "for",
        "type": "string (required)",
        "description": "ID of component whose actions should trigger callback(s)"
      },
      {
        "name": "onData",
        "type": "function",
        "description": "callback function called with an array of all actions when a new member action arrives",
        "default": "onData() {}"
      },
      {
        "name": "onDatum",
        "type": "function",
        "description": "callback function invoked with every individual incoming member action",
        "default": "onDatum() {}"
      },
      {
        "name": "returnFullObject",
        "type": "boolean",
        "description": "controls whether to invoke the supplied callback(s) with the full action object or only its value",
        "default": false
      }
    ],
    "description": "Invisible component listening to incoming member actions and invoking a given callback."
  },
  "MultiCards": {
    "props": [
      {
        "name": "animation",
        "type": "object",
        "description": "if set the component uses an entry animation; the object contains a name (like `anim-scale-up`) and a duration (like `1.7s` = 1.7 seconds)",
        "default": {}
      },
      {
        "name": "cardStyles",
        "type": "{container,front,back}",
        "description": "allows to override the given styles. Handles objects with  `container`, `front` and `back` keys",
        "default": {
          "container": {},
          "front": {},
          "back": {}
        }
      },
      {
        "name": "game",
        "type": "string",
        "description": "multi-card games. Can be either `memory` or `bingo`.",
        "default": null
      },
      {
        "name": "language",
        "type": "string",
        "description": "voice recognition language identifier",
        "default": "en-US"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "a function that receives the matrix of the flippable cards",
        "default": "onChange() {}"
      },
      {
        "name": "oneTime",
        "type": "boolean",
        "description": "indicates whether the flip process may be executed just once",
        "default": false
      },
      {
        "name": "values",
        "type": "array<object>",
        "description": "the values for the respective cards, input in an array that has entry fields for a `front` and `back` value. Such a value could be a string, but also a full fledged ISLE component",
        "default": []
      }
    ],
    "description": "An ISLE component that allows you to create and control multiple flippable cards (e.g. in a game of Memory)."
  },
  "MultipleChoiceMatrix": {
    "props": [
      {
        "name": "questions",
        "type": "array (required)",
        "description": "an array of questions"
      },
      {
        "name": "answers",
        "type": "array (required)",
        "description": "an array of answers"
      },
      {
        "name": "title",
        "type": "(string|node)",
        "description": "title to be displayed on top of the question matrix",
        "default": null
      },
      {
        "name": "solution",
        "type": "array<array>",
        "description": "boolean matrix the element of which indicate whether the respective radio button or checkbox should be ticked",
        "default": null
      },
      {
        "name": "type",
        "type": "string",
        "description": "question type (`radio` corresponds to \"Select one\", `checkbox` to \"Select all that apply\")",
        "default": "radio"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked when the value of a checkbox / radio button changes; invoked with the two-dimensional boolean array of the active status for each answer option",
        "default": "onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "default": "onSubmit() {}"
      }
    ],
    "description": "An ISLE component that renders a matrix of multiple choice questions with the same answers."
  },
  "MultipleChoiceQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "the question displayed at the top of the multiple choice component",
        "default": ""
      },
      {
        "name": "solution",
        "type": "(number|array)",
        "description": "number denoting which answer is correct or an `array` of the correct answer numbers in case the learner should be able to select multiple answers",
        "default": null
      },
      {
        "name": "answers",
        "type": "array (required)",
        "description": "an `array` of answer objects. Each answer should be an object with `content` and `explanation` fields, which denote the displayed answer option and an explanation visible after the question has been submitted to explain why the answer is correct or incorrect"
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "bottom"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the question is disabled",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "provideFeedback",
        "type": "string",
        "description": "if `full`, feedback including the correct answer is displayed after learners submit their answers; if `incremental`, feedback is only displayed for the selected answer; if `none`, no feedback is returned",
        "default": "incremental"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "displaySolution",
        "type": "boolean",
        "description": "controls whether the solution is displayed upfront",
        "default": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time the selected answer changes; receives the index of the selected question as its sole argument (or an array in case the question is of type \"Choose all that apply\")",
        "default": "onChange(){}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked after an answer is submitted",
        "default": "onSubmit(){}"
      }
    ],
    "description": "An ISLE component that renders a multiple choice question. It supports the case where the learner has to select a single answer and when there might be multiple correct answers and all correct ones must be picked."
  },
  "MultipleChoiceSurvey": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "component identifier"
      },
      {
        "name": "question",
        "type": "string",
        "description": "string indicating the question to ask the students",
        "default": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one wishes to allow students to answer the survey multiple times",
        "default": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "controls whether student answers are anonymized",
        "default": false
      },
      {
        "name": "answers",
        "type": "array",
        "description": "array indicating answer choices for the students",
        "default": []
      },
      {
        "name": "multipleAnswers",
        "type": "boolean",
        "description": "indicates whether students may select more than one answer. Note that this differs from allowMultipleAnswers in that allow makes students able to submit the question multiple times",
        "default": false
      },
      {
        "name": "title",
        "type": "string",
        "description": "panel title",
        "default": "Survey"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "function to be called when an answer is submitted",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A survey component in which the instructor may collect multiple-choice survey data from students in real-time."
  },
  "News": {
    "props": [
      {
        "name": "invisible",
        "type": "boolean",
        "description": "indicates whether to show the input fields or rely solely on voice control to be triggered",
        "default": false
      },
      {
        "name": "key",
        "type": "string",
        "description": "authentication key for the News API",
        "default": "2987fd19bd374249979c4e38e40ef8b8"
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "default": "en-US"
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "onArticles",
        "type": "function",
        "description": "callback function invoked with an array of article objects once they are received",
        "default": "onArticles() {}"
      }
    ],
    "description": "The **News** component scans the public **News API** (consisting of 71 international  newspapers) and displays the latest 10 articles of the given newspaper. There are two ways to enter a source: one by typing into the search field and submitting via the ENTER button, the second via voice."
  },
  "NumberQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "number question",
        "default": ""
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "top"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "solution",
        "type": "number",
        "description": "a numeric answer to the problem",
        "default": null
      },
      {
        "name": "digits",
        "type": "number",
        "description": "number of digits for which the answer supplied by the student must match the solution to be considered correct. Set to 0 to match as an integer. If set to null it will search for an exact match.",
        "default": 3
      },
      {
        "name": "max",
        "type": "number",
        "description": "maximum allowed input value",
        "default": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "minimum allowed input value",
        "default": null
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "default": true
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after the value of the number field changes; receives the current value as its sole argument",
        "default": "onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly anwered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A number question component."
  },
  "NumberSurvey": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "component identifier"
      },
      {
        "name": "question",
        "type": "string",
        "description": "the question to be displayed",
        "default": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether the same user (or session if anonymous) may submit multiple answers)",
        "default": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "Allows for the students to submit data anonymously. Note that if this option is set to \"true\", then the instructors will be unable to see the ID of the submitting student",
        "default": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "A `string` or `numeric` value indicating the step of the arrows seen when hovering the cursor above the input box. If `'any'`, the step will be set to `1`",
        "default": "any"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function invoked once students submits an answer",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A survey component in which the instructor may collect numeric survey data from students in real-time."
  },
  "OrderQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question for which the student has to bring the available `options` into the correct order",
        "default": ""
      },
      {
        "name": "options",
        "type": "array (required)",
        "description": "an array of objects with `id` and `text` keys which the student has to bring into the correct ordering, which is assumed to be the supplied order"
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "controls whether to show a notification displaying whether the submitted answer is correct or not",
        "default": true
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "bottom"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "failureMsg",
        "type": "string",
        "description": "message to be displayed when student submits a wrong answer",
        "default": "Not quite, try again!"
      },
      {
        "name": "successMsg",
        "type": "string",
        "description": "message to be displayed when student submits the correct answer",
        "default": "That's the correct ordering!"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after dragging an element; has two parameters: a `boolean` indicating whether the elements were placed in the correct order and and `array` with the current ordering",
        "default": "onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as a sole parameter a `boolean` indicating whether the elements were placed in the correct order",
        "default": "onSubmit() {}"
      }
    ],
    "description": "An order question component that asks student to bring a collection of elements into the correct order."
  },
  "Pages": {
    "props": [
      {
        "name": "activePage",
        "type": "number",
        "description": "active page",
        "default": 1
      },
      {
        "name": "title",
        "type": "string",
        "description": "displayed title of the pages container",
        "default": ""
      },
      {
        "name": "size",
        "type": "string",
        "description": "size of the pagination buttons (one of `default`, `lg`, `large`, `sm`, `small`, `xs`, or `xsmall`)",
        "default": "default"
      },
      {
        "name": "height",
        "type": "(number|string)",
        "description": "the maximum height of the container. If an embedded page is taller, a vertical scrollbar is added",
        "default": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onSelect",
        "type": "function",
        "description": "Function invoked when active change is changed. Receives the new active page index as a sole parameter",
        "default": "onSelect() {}"
      }
    ],
    "description": "An ISLE pagination component that allows the user to step through a sequence of pages."
  },
  "Panel": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "CSS class name",
        "default": ""
      },
      {
        "name": "header",
        "type": "(string|node)",
        "description": "panel heading (h3)",
        "default": null
      },
      {
        "name": "bodyStyle",
        "type": "object",
        "default": {}
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "Card component."
  },
  "Playground": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "code to be displayed in the playground box. This code will be editable by the user in the brower or lesson",
        "default": ""
      },
      {
        "name": "scope",
        "type": "object",
        "description": "scope object with variables / components which should be made available to the executed code; most often this is the name of the component you wish to display",
        "default": {}
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "Playground component to experiment with ISLE components."
  },
  "Plotly": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "data array"
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether the plot should be draggable",
        "default": false
      },
      {
        "name": "editable",
        "type": "boolean",
        "description": "controls whether labels of the created plot are editable",
        "default": false
      },
      {
        "name": "id",
        "type": "string",
        "description": "component identifier",
        "default": null
      },
      {
        "name": "layout",
        "type": "object",
        "description": "Plotly layout object",
        "default": {}
      },
      {
        "name": "config",
        "type": "object",
        "default": {}
      },
      {
        "name": "legendButtons",
        "type": "boolean",
        "description": "controls whether to display buttons for changing the legend",
        "default": true
      },
      {
        "name": "onAfterPlot",
        "type": "function",
        "description": "callback function invoked each time a chart is plotted",
        "default": "onAfterPlot() {}"
      },
      {
        "name": "onRelayout",
        "type": "function",
        "default": "onRelayout() {}"
      },
      {
        "name": "onSelected",
        "type": "function",
        "description": "callback function invoked when elements are selected",
        "default": "onSelected() {}"
      },
      {
        "name": "onShare",
        "type": "function",
        "description": "callback function invoked when clicking on the \"Share\" button",
        "default": null
      },
      {
        "name": "removeButtons",
        "type": "boolean",
        "description": "controls whether to remove all buttons",
        "default": false
      },
      {
        "name": "toggleFullscreen",
        "type": "boolean",
        "description": "controls whether to display the plot in fullscreen mode",
        "default": true
      }
    ],
    "description": "Plotly visualization."
  },
  "Polaroid": {
    "props": [
      {
        "name": "image",
        "type": "string",
        "description": "image URL",
        "default": null
      },
      {
        "name": "removable",
        "type": "boolean",
        "description": "indicates whether the image is removable when clicking on the pin",
        "default": false
      },
      {
        "name": "showPin",
        "type": "boolean",
        "description": "shows a pin",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked (receives the id of the Polaroid as parameter)",
        "default": "onClick() {}"
      }
    ],
    "description": "A component displaying an image in the style of a polaroid."
  },
  "Preload": {
    "props": [
      {
        "name": "image",
        "type": "object",
        "description": "the image or the array of images that should be preloaded",
        "default": null
      }
    ],
    "description": "Preload resources to avoid stuttering loading times."
  },
  "ProportionsSurvey": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "component identifier"
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "contols whether one wishes to allow students to answer the survey multiple times",
        "default": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "contols whether student answers are anonymized",
        "default": false
      },
      {
        "name": "colors",
        "type": "array",
        "description": "array of colors for the pie chart components. If not defined, a custom color scale will be used",
        "default": [
          "tomato",
          "orange",
          "gold",
          "darkcyan",
          "salmon",
          "lightgreen",
          "gainsboro",
          "lightpurple",
          "darkkhaki",
          "darkseagreen"
        ]
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the survey is deactivated",
        "default": false
      },
      {
        "name": "group",
        "type": "string",
        "description": "group display heading",
        "default": "group results"
      },
      {
        "name": "groupHeight",
        "type": "number",
        "description": "proportions input height for group display (in px)",
        "default": 100
      },
      {
        "name": "groupInnerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart for group display (in px)",
        "default": 40
      },
      {
        "name": "legends",
        "type": "array",
        "description": "legend labels that describe the options to be weighed",
        "default": null
      },
      {
        "name": "margin",
        "type": "string",
        "description": "proportion input margin (in px)",
        "default": "40px"
      },
      {
        "name": "nElements",
        "type": "number",
        "description": "number of elements that shall be weighed",
        "default": 6
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function invoked once students submits an answer",
        "default": "onSubmit() {}"
      },
      {
        "name": "personalHeight",
        "type": "number",
        "description": "proportions input height for individual student (in px)",
        "default": 200
      },
      {
        "name": "personalInnerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart for individual student (in px)",
        "default": 60
      },
      {
        "name": "precision",
        "type": "number",
        "description": "displayed precision of proportion values",
        "default": 2
      },
      {
        "name": "question",
        "type": "string",
        "description": "the question to be displayed",
        "default": ""
      },
      {
        "name": "step",
        "type": "number",
        "description": "the step of the arrows seen when hovering the cursor above the input box",
        "default": 0.25
      }
    ],
    "description": "Component that allows a group of people to vote on the weights and importance of given options."
  },
  "QuestionForm": {
    "props": [
      {
        "name": "buttonLabel",
        "type": "string",
        "description": "label of the submit button",
        "default": "Submit"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when the submit button is clicked",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A form component combining different question components together with a single submission button."
  },
  "Queue": {
    "props": [
      {
        "name": "draggable",
        "type": "boolean",
        "default": true
      },
      {
        "name": "show",
        "type": "boolean",
        "default": true
      },
      {
        "name": "onHide",
        "type": "function",
        "default": null
      },
      {
        "name": "onQueueSize",
        "type": "function",
        "default": "function noop() {\n\t// Empty function...\n}"
      },
      {
        "name": "onNewQuestion",
        "type": "function",
        "default": "function noop() {\n\t// Empty function...\n}"
      }
    ],
    "description": "Description is missing."
  },
  "Quiz": {
    "props": [
      {
        "name": "confidence",
        "type": "boolean",
        "description": "whether to display a Likert scale asking for the confidence of the user's answer",
        "default": false
      },
      {
        "name": "forceConfidence",
        "type": "boolean",
        "description": "controls whether a user has to supply a confidence level before moving to the next question",
        "default": false
      },
      {
        "name": "count",
        "type": "number",
        "description": "number of questions to include in the quiz",
        "default": null
      },
      {
        "name": "questions",
        "type": "array (required)",
        "description": "array of questions from which questions will be randomly selected"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the timer for the quiz is active",
        "default": true
      },
      {
        "name": "duration",
        "type": "number",
        "description": "duration of the quiz; once time is up, the summary page will be displayed",
        "default": null
      },
      {
        "name": "skippable",
        "type": "boolean",
        "description": "controls whether questions in  the quiz are skippable",
        "default": true
      },
      {
        "name": "footerNodes",
        "type": "array",
        "description": "array of nodes to be displayed in the footer of each question",
        "default": []
      },
      {
        "name": "nextLabel",
        "type": "string",
        "description": "label of button to advance to next question",
        "default": "Next Question"
      },
      {
        "name": "showFinishButton",
        "type": "boolean",
        "description": "controls whether to display button to finish quiz and jump directly to results page",
        "default": false
      },
      {
        "name": "finishLabel",
        "type": "string",
        "description": "label of button to finish quiz",
        "default": "Finish Quiz"
      },
      {
        "name": "onFinished",
        "type": "function",
        "description": "callback invoked when the quiz is finished and the results page is displayed",
        "default": "onFinished() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when user submits an answer",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A quiz component displaying a sequence of question components."
  },
  "RHelp": {
    "props": [
      {
        "name": "func",
        "type": "string",
        "description": "name of the `R function` for which to open the documentation. If not supplied, the content of the `RHelp` tag is assumed to be equal to the name of the function",
        "default": ""
      },
      {
        "name": "library",
        "type": "string",
        "description": "name of the R package in which the function resides",
        "default": "base"
      },
      {
        "name": "visible",
        "type": "boolean",
        "description": "controls whether the help modal window should be opened at startup",
        "default": false
      }
    ],
    "description": "Make words pull up R documentation in a modal window when clicked."
  },
  "ROutput": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code used to evaluate",
        "default": ""
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "default": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code (or `array` of code blocks) to be prepended to the code stored in `code` when evaluating",
        "default": ""
      }
    ],
    "description": "Component for rendering R output inside an ISLE lesson."
  },
  "RPlot": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code to generate the plot",
        "default": ""
      },
      {
        "name": "width",
        "type": "(number|string)",
        "description": "width of the plot (in px)",
        "default": 600
      },
      {
        "name": "height",
        "type": "(number|string)",
        "description": "height of the plot (in px)",
        "default": 350
      },
      {
        "name": "fileType",
        "type": "string",
        "description": "file type of the plot (`png` or `svg`)",
        "default": "png"
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "default": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "`string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating",
        "default": ""
      },
      {
        "name": "onDone",
        "type": "function",
        "description": "callback invoked with `err`, `img` and `body` arguments once a plot is created",
        "default": "onDone() {}"
      }
    ],
    "description": "Component for rendering an R plot inside an ISLE lesson."
  },
  "RShell": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code to be evaluated",
        "default": ""
      },
      {
        "name": "solution",
        "type": "string",
        "description": "for programming questions, R code `string` representing the official solution for the problem",
        "default": ""
      },
      {
        "name": "hints",
        "type": "array",
        "description": "for programming questions, an array of hints providing guidance on how to approach the problem",
        "default": []
      },
      {
        "name": "addPreceding",
        "type": "boolean",
        "description": "if set to true, the shell will evaluate all the code from the current component and all previous ones occurring in the lesson",
        "default": false
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "default": []
      },
      {
        "name": "precompute",
        "type": "boolean",
        "description": "controls whether the default code should be executed once the component has mounted",
        "default": false
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
        "default": ""
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether group chat functionality should be enabled",
        "default": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether to disable all user inputs and make the code block static",
        "default": false
      },
      {
        "name": "lines",
        "type": "number",
        "description": "number of lines to display",
        "default": 5
      },
      {
        "name": "resettable",
        "type": "boolean",
        "description": "controls whether to display a reset button for restoring the default code input",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever the text field input changes",
        "default": "onChange() {}"
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "callback invoked whenever the `Evaluate` button is clicked",
        "default": "onEvaluate(){}"
      },
      {
        "name": "onResult",
        "type": "function",
        "description": "callback invoked whenever the result of a code execution is obtained from the cloud. The result `string` is passed as the only argument to the callback function",
        "default": "onResult() {}"
      }
    ],
    "description": "An interactive R Shell that can be used to execute R commands in the cloud using [OpenCPU](https://www.opencpu.org/)."
  },
  "RTable": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code returning a data.frame containing the data to be displayed in the table",
        "default": ""
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "default": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
        "default": ""
      },
      {
        "name": "width",
        "type": "number",
        "description": "width (between 0 and 1)",
        "default": 0.5
      }
    ],
    "description": "Component for rendering a R data frame or matrix in a tabular display."
  },
  "RangeQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "displayed question",
        "default": ""
      },
      {
        "name": "solution",
        "type": "array<number>",
        "description": "two-element array containing the endpoints of the correct range",
        "default": null
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "top"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "digits",
        "type": "number",
        "description": "number of digits that have to match between solution and user-supplied answer. If not given or set to null, the component checks for strict equality. If set to 0, checks for integer equality.",
        "default": 3
      },
      {
        "name": "max",
        "type": "number",
        "description": "maximum input value",
        "default": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "minimum input value",
        "default": null
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "default": true
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one can submit multiple answers",
        "default": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "default": {}
      },
      {
        "name": "onChangeLower",
        "type": "function",
        "description": "callback triggered after the lower bound is changed by the user",
        "default": "onChangeLower() {}"
      },
      {
        "name": "onChangeUpper",
        "type": "function",
        "description": "callback triggered after the upper bound is changed by the user",
        "default": "onChangeUpper() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly anwered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A range question component that asks students to supply a lower and upper end point."
  },
  "Recorder": {
    "props": [
      {
        "name": "audio",
        "type": "boolean",
        "description": "indicates whether audio should be recorded",
        "default": false
      },
      {
        "name": "camera",
        "type": "boolean",
        "description": "indicates whether webcam should be recorded",
        "default": false
      },
      {
        "name": "screen",
        "type": "boolean",
        "description": "indicates whether the screen should be captured",
        "default": false
      },
      {
        "name": "autostart",
        "type": "boolean",
        "description": "indicates whether recording should start immediately",
        "default": false
      },
      {
        "name": "downloadable",
        "type": "boolean",
        "description": "indicates whether users should be able to download the recording",
        "default": false
      },
      {
        "name": "uploadable",
        "type": "boolean",
        "description": "indicates whether users should be able to upload the recording to the server",
        "default": false
      },
      {
        "name": "bitsPerSecond",
        "type": "number",
        "description": "bits per second",
        "default": 128000
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      }
    ],
    "description": "An ISLE component for recording audio, screen and video."
  },
  "Revealer": {
    "props": [
      {
        "name": "id",
        "type": "string (required)"
      },
      {
        "name": "message",
        "type": "string",
        "description": "message to be displayed when content is hidden",
        "default": "Content hidden by instructor"
      },
      {
        "name": "show",
        "type": "boolean",
        "description": "controls whether to initially display child elements",
        "default": false
      }
    ],
    "description": "An ISLE component that instructors may use to selectively reveal or hide children content to all users."
  },
  "Runner": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the runner should be active. Upon activation, the `onEvaluate` function is called in the given interval (or once)",
        "default": true
      },
      {
        "name": "interval",
        "type": "number",
        "description": "number of milliseconds between invocations of `onEvaluate`. If no interval is set, the function is only invoked once",
        "default": null
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "function to be invoked",
        "default": "onEvaluate() {}"
      }
    ],
    "description": "The runner component will execute a supplied function either once or at a given interval."
  },
  "Score": {
    "props": [
      {
        "name": "duration",
        "type": "boolean",
        "description": "indicates whether the time is displayed as a duration - beginning with session start",
        "default": false
      },
      {
        "name": "format",
        "type": "string",
        "description": "sets the format of the time string",
        "default": "HH:MM"
      },
      {
        "name": "type",
        "type": "string",
        "description": "sets the type of the score UI - available options: 'default', 'bottom', 'full'",
        "default": "default"
      }
    ],
    "description": "An ISLE component that allows you display the user's score."
  },
  "ScrollingText": {
    "props": [
      {
        "name": "list",
        "type": "array<string>",
        "description": "list of image URLs to be displayed",
        "default": []
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": "indicates whether the process shall be displayed infinitely",
        "default": false
      },
      {
        "name": "direction",
        "type": "string",
        "description": ": the direction of the text flow, available values are left, right, up, down, tracking, focus and swirl",
        "default": "right"
      },
      {
        "name": "still",
        "type": "number",
        "description": ": the time the text remains still (in seconds)",
        "default": 3
      },
      {
        "name": "interval",
        "type": "number",
        "description": ": the interval between the calls (in seconds)",
        "default": 15
      },
      {
        "name": "inTime",
        "type": "number",
        "description": ": time of the entrance effect (in seconds)",
        "default": 0.6
      },
      {
        "name": "outTime",
        "type": "number",
        "description": ":  time of the exit effect (in seconds)",
        "default": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": ": style definition of the text",
        "default": {}
      }
    ],
    "description": "A dynamic background component that changes a background image at a specified interval."
  },
  "SelectQuestionMatrix": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "default": ""
      },
      {
        "name": "rows",
        "type": "array",
        "default": []
      },
      {
        "name": "cols",
        "type": "array",
        "default": []
      },
      {
        "name": "options",
        "type": "object",
        "default": {}
      },
      {
        "name": "solution",
        "type": "object",
        "default": {}
      },
      {
        "name": "hints",
        "type": "array",
        "default": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "default": "bottom"
      },
      {
        "name": "feedback",
        "type": "boolean",
        "default": false
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "default": true
      },
      {
        "name": "failureMsg",
        "type": "string",
        "default": "Not quite, try again!"
      },
      {
        "name": "successMsg",
        "type": "string",
        "default": "That's the correct answer!"
      },
      {
        "name": "chat",
        "type": "boolean",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "default": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A question with an answer consisting of multiple select boxes."
  },
  "SelectQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question for which the student has to select one of the available answer options",
        "default": ""
      },
      {
        "name": "options",
        "type": "array (required)",
        "description": "available answer options from which the student can select"
      },
      {
        "name": "solution",
        "type": "string (required)",
        "description": "question solution (must be equal to one of the answer options)"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "preselected answer option",
        "default": ""
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether the component is rendered inline or not",
        "default": false
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "default": "bottom"
      },
      {
        "name": "hints",
        "type": "array<string>",
        "description": "hints providing guidance on how to answer the question",
        "default": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "default": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "default": false
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "default": true
      },
      {
        "name": "failureMsg",
        "type": "string",
        "description": "message to be displayed when student selects a wrong answer",
        "default": "Not quite, try again!"
      },
      {
        "name": "successMsg",
        "type": "string",
        "description": "message to be displayed when student selects the correct answer",
        "default": "That's the correct answer!"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after the submit action",
        "default": "onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly anwered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "default": "onSubmit() {}"
      }
    ],
    "description": "A select question component."
  },
  "ShapedForm": {
    "props": [
      {
        "name": "margin",
        "type": "number",
        "description": "the margin in regards to the floating text, in pixels. Default: 10",
        "default": 10
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked",
        "default": null
      },
      {
        "name": "image",
        "type": "string",
        "description": "the background image url",
        "default": null
      },
      {
        "name": "svg",
        "type": "string",
        "description": "the svg background image url",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "the style of the object, it can hold any css including animations",
        "default": {}
      }
    ],
    "description": "A component that allows the display of shapes, triggered by images with alpha channel."
  },
  "ShapedImage": {
    "props": [
      {
        "name": "background",
        "type": "boolean",
        "description": "if set the component can hold and display child elements",
        "default": false
      },
      {
        "name": "margin",
        "type": "number",
        "description": "the margin in regards to the floating text, in pixels. Default: 10",
        "default": 10
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked",
        "default": null
      },
      {
        "name": "src",
        "type": "string",
        "description": "the image url",
        "default": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "the style of the object, it can hold any css including animations",
        "default": {}
      },
      {
        "name": "threshold",
        "type": "number",
        "description": "alpha threshold, number between 0 and 1",
        "default": 1
      }
    ],
    "description": "A component that allows the display of shapes, triggered by images with alpha channel."
  },
  "Sketchpad": {
    "props": [
      {
        "name": "autoSave",
        "type": "boolean",
        "description": "controls whether the editor should save the current text to the local storage of the browser at a given time interval",
        "default": true
      },
      {
        "name": "intervalTime",
        "type": "number",
        "description": "time between auto saves",
        "default": 30000
      },
      {
        "name": "hideInputButtons",
        "type": "boolean",
        "description": "controls whether to hide drawing and text input buttons",
        "default": false
      },
      {
        "name": "hideNavigationButtons",
        "type": "boolean",
        "description": "controls whether to hide buttons for navigating between pages",
        "default": false
      },
      {
        "name": "hideRecordingButtons",
        "type": "boolean",
        "description": "controls whether to hide the recording buttons",
        "default": false
      },
      {
        "name": "hideSaveButtons",
        "type": "boolean",
        "description": "controls whether to hide the save buttons",
        "default": false
      },
      {
        "name": "hideTransmitButtons",
        "type": "boolean",
        "description": "controls whether to hide buttons for transmitting user actions",
        "default": false
      },
      {
        "name": "brushSize",
        "type": "number",
        "description": "size of the brush to paint with",
        "default": 6
      },
      {
        "name": "color",
        "type": "string",
        "description": "color of the brush and texts",
        "default": "#444444"
      },
      {
        "name": "canvasWidth",
        "type": "number",
        "description": "width of the canvas element (in px)",
        "default": 1200
      },
      {
        "name": "canvasHeight",
        "type": "number",
        "description": "height of the canvas element (in px)",
        "default": 700
      },
      {
        "name": "fullscreen",
        "type": "boolean",
        "description": "controls whether to automatically resize the canvas to the width and height of the browser window",
        "default": false
      },
      {
        "name": "fill",
        "type": "string",
        "description": "if `horizontal`, fill all available horizontal space when drawing a PDF; if `vertical`, all vertical space is used to prevent y-axis overflow",
        "default": "vertical"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "whether to make the component read-only and forbid drawing on the sketchpad",
        "default": false
      },
      {
        "name": "fontFamily",
        "type": "string",
        "description": "font family",
        "default": "Arial"
      },
      {
        "name": "fontSize",
        "type": "number",
        "description": "font size",
        "default": 24
      },
      {
        "name": "nodes",
        "type": "object",
        "description": "components to be rendered on top of specified slides; `keys` should correspond to page numbers, `values` to the components",
        "default": {}
      },
      {
        "name": "noPages",
        "type": "number",
        "description": "initial number of pages",
        "default": 1
      },
      {
        "name": "pdf",
        "type": "string",
        "description": "Link to PDF file for baked-in page backgrounds",
        "default": null
      },
      {
        "name": "showTutorial",
        "type": "boolean",
        "description": "show a tutorial for the sketchpad",
        "default": false
      },
      {
        "name": "transmitOwner",
        "type": "boolean",
        "description": "whether owner actions should be transmitted to other users in real-time",
        "default": true
      },
      {
        "name": "groupMode",
        "type": "boolean",
        "description": "controls whether all user's actions are transmitted to everyone else",
        "default": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever a new line element is drawn",
        "default": "onChange() {}"
      }
    ],
    "description": "A drawing sketchpad for note taking on lecture slides or empty pages."
  },
  "Slider": {
    "props": [
      {
        "name": "title",
        "type": "string",
        "description": "title for the slideshow / carousel to be displayed at its top",
        "default": ""
      },
      {
        "name": "dots",
        "type": "boolean",
        "description": "display dots at the bottom for quickly navigating to any slide",
        "default": true
      },
      {
        "name": "fade",
        "type": "boolean",
        "description": "controls whether fading is used for transitioning between the slides",
        "default": false
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether users can drag the slides to navigate between them",
        "default": true
      },
      {
        "name": "goto",
        "type": "number",
        "description": "If property is changed, the component jumps to the slide with the selected index",
        "default": 0
      },
      {
        "name": "infinite",
        "type": "boolean",
        "description": "controls whether the slideshow wraps around it's contents",
        "default": false
      },
      {
        "name": "interval",
        "type": "number",
        "description": "sets a time interval for an automatic slide change",
        "default": null
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking on the next/previous buttons",
        "default": "onClick() {}"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "swipeToSlide",
        "type": "boolean",
        "description": "enables drag/swipe behavior",
        "default": true
      }
    ],
    "description": "A component which displays its children in a slideshow or carousel."
  },
  "Appear": {
    "props": [],
    "description": "Wrapped elements in the appear tag makes them appear/disappear in order in response to navigation."
  },
  "BlockQuote": {
    "props": [],
    "description": "A styled blockquote. Should be used in conjunction with the Spectacle `Cite` and `Quote` tags."
  },
  "Cite": {
    "props": [],
    "description": "Component wrapping the citation source. Should be used in conjunction with the Spectacle `BlockQuote` and `Quote` tags."
  },
  "CodePane": {
    "props": [],
    "description": "Component displaying a styled, highlighted code preview."
  },
  "CodeSlide": {
    "props": [
      {
        "name": "lang",
        "type": "string (required)"
      },
      {
        "name": "code",
        "type": "string (required)"
      },
      {
        "name": "ranges",
        "type": "array<{loc,title,note}> (required)"
      },
      {
        "name": "showLineNumbers",
        "type": "boolean",
        "default": true
      }
    ],
    "description": "Description is missing."
  },
  "Code": {
    "props": [],
    "description": "Component displaying inline text in a monospace font."
  },
  "Deck": {
    "props": [],
    "description": "Spectacle slide deck. Wraps `<Slide>` tags."
  },
  "Fill": {
    "props": [],
    "description": "The fill tag takes up all the space available to it. Fill tags next to each other form an equidistant grid."
  },
  "Fit": {
    "props": [],
    "description": "Component taking up as much space as its bounds provide, but not more."
  },
  "Heading": {
    "props": [],
    "description": "Spectacle slide headings."
  },
  "Image": {
    "props": [],
    "description": "Spectacle slide image."
  },
  "Spectacle": {
    "props": [],
    "description": "Description is missing."
  },
  "Layout": {
    "props": [],
    "description": "Component wrapping `Fit` and `Fill` tags to provide a row."
  },
  "ListItem": {
    "props": [],
    "description": "Spectacle list item component."
  },
  "List": {
    "props": [],
    "description": "Spectacle list component."
  },
  "Notes": {
    "props": [],
    "description": "Spectacle presentation slide notes."
  },
  "Quote": {
    "props": [],
    "description": "Component wrapping a quote. Should be used in conjunction with the Spectacle `BlockQuote` and `Cite` tags."
  },
  "Slide": {
    "props": [],
    "description": "Spectacle presentation slide."
  },
  "TableBody": {
    "props": [],
    "description": "Spectacle table body component."
  },
  "TableHeaderItem": {
    "props": [],
    "description": "Spectacle table header item component."
  },
  "TableHeader": {
    "props": [],
    "description": "Spectacle table header component."
  },
  "TableItem": {
    "props": [],
    "description": "Spectacle table item component."
  },
  "TableRow": {
    "props": [],
    "description": "Spectacle table row component."
  },
  "Table": {
    "props": [],
    "description": "Spectacle table component."
  },
  "SText": {
    "props": [],
    "description": "Spectacle text component."
  },
  "StatusBar": {
    "props": [],
    "description": "Description is missing."
  },
  "StickyNote": {
    "props": [
      {
        "name": "title",
        "type": "string",
        "description": "note title",
        "default": "Enter a title"
      },
      {
        "name": "body",
        "type": "string",
        "description": "text of the note",
        "default": "Body of the note"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "date",
        "type": "string",
        "description": "a date displayed for the note",
        "default": ""
      },
      {
        "name": "stain",
        "type": "boolean",
        "description": "controls whether to show a coffee stain",
        "default": null
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when the note is clicked",
        "default": "onClick() {}"
      },
      {
        "name": "removable",
        "type": "boolean",
        "description": "controls whether the note is removed when clicked",
        "default": false
      }
    ],
    "description": "A sticky note rendering some text."
  },
  "SurveyGenerator": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "component identifier"
      }
    ],
    "description": "Component allowing instructors to create multiple-choice surveys, free text surveys and number surveys on the fly in real-time through an easy-to-use interface."
  },
  "Switch": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the switch is active or not",
        "default": true
      },
      {
        "name": "tooltip",
        "type": "string",
        "description": "tooltip displayed when hovering over the switch element",
        "default": "Click to cycle through available options."
      },
      {
        "name": "tooltipPos",
        "type": "string",
        "description": "placement of the tooltip (either `top`, `left`, `right`, or `bottom`)",
        "default": "top"
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name for the enclosing span element",
        "default": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked when elements are switched. Receives as its first argument the index of the currently displayed child",
        "default": "onChange() {}"
      }
    ],
    "description": "The Switch component allows the display of one element out of a list of several elements. Users can cycle through the different children of the Switch tag by clicking on the currently displayed one."
  },
  "TeX": {
    "props": [
      {
        "name": "raw",
        "type": "(string|number) (required)",
        "description": "The literal LaTeX `string` to render. Also accepts `numbers`"
      },
      {
        "name": "displayMode",
        "type": "boolean",
        "description": "`boolean` indicating whether to display the equation inline or in display mode",
        "default": false
      },
      {
        "name": "numbered",
        "type": "boolean",
        "description": "controls whether to display an equation number for display mode equations",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "`object` with CSS key-value pairs to be applied to the equation container",
        "default": {}
      },
      {
        "name": "tag",
        "type": "string",
        "description": "Custom characters displayed for display equations at the right side. Defaults to the number of the equation inside the lesson",
        "default": null
      },
      {
        "name": "elems",
        "type": "object",
        "description": "`object` with `keys` denoting LaTeX characters and their corresponding values being configuration `objects` to make them interactive. Setting a `tooltip` option will show a tooltip when hovering over the LaTeX characters. Setting a `variable` property will display an input slider to change the respective state variable; in this case, additional properties `legend`, `min`, `max`, and `step` are supported",
        "default": {}
      },
      {
        "name": "popoverPlacement",
        "type": "string",
        "description": "popover position for the specified `elems`",
        "default": "top"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback `function` invoked whenever a user clicks on the equation",
        "default": "onClick() {}"
      }
    ],
    "description": "`TeX` is an ISLE element that can be used to display LaTeX equations. Under the hood, the component uses [KaTeX](https://github.com/Khan/KaTeX) for blazingly fast rendering."
  },
  "Text": {
    "props": [
      {
        "name": "raw",
        "type": "string",
        "description": "text to be rendered",
        "default": ""
      },
      {
        "name": "className",
        "type": "string",
        "description": "class names",
        "default": ""
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether to render the Markdown as inline text",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      }
    ],
    "description": "Text component, which allows rendering of raw text as Markdown and enables voice control."
  },
  "TimedButton": {
    "props": [
      {
        "name": "block",
        "type": "boolean",
        "description": "display bottom in full width",
        "default": false
      },
      {
        "name": "duration",
        "type": "number",
        "description": "the time (in seconds) it takes until the button gets reactivated",
        "default": 3
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "if disabled the button will be inactive, but the countdown starts",
        "default": false
      },
      {
        "name": "href",
        "type": "string",
        "default": null
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking the button",
        "default": "onClick() {}"
      },
      {
        "name": "size",
        "type": "string",
        "description": "font size, passed to the native React button",
        "default": "sm"
      },
      {
        "name": "type",
        "type": "string",
        "description": "button type, passed to the native React button",
        "default": "submit"
      },
      {
        "name": "variant",
        "type": "string",
        "description": "passed to the button",
        "default": "info"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A button component that becomes deactivated for a specified duration upon clicking."
  },
  "Timer": {
    "props": [
      {
        "name": "id",
        "type": "string (required)",
        "description": "the unique `string` ID for the timer. If an ID is set, the timer component is persistent over page refreshes"
      },
      {
        "name": "active",
        "type": "boolean (required)",
        "description": "flag that can be toggled to start or pause the timer"
      },
      {
        "name": "duration",
        "type": "number (required)",
        "description": "duration in seconds for the timer"
      },
      {
        "name": "invisible",
        "type": "boolean",
        "description": "controls whether the timer should be hidden",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onTimeUp",
        "type": "function",
        "description": "callback invoked when the timer runs out",
        "default": "onTimeUp() {}"
      }
    ],
    "description": "Formats time in the format `minutes:seconds`."
  },
  "Tooltip": {
    "props": [
      {
        "name": "id",
        "type": "string",
        "default": "tooltip"
      },
      {
        "name": "show",
        "type": "boolean",
        "description": "controls whether the tooltip shall be displayed",
        "default": true
      },
      {
        "name": "tooltip",
        "type": "(string|node)",
        "description": "tooltip content",
        "default": null
      },
      {
        "name": "placement",
        "type": "string",
        "description": "direction of the tooltip",
        "default": "right"
      }
    ],
    "description": "A tooltip overlay."
  },
  "Typewriter": {
    "props": [
      {
        "name": "deviation",
        "type": "number",
        "description": "allows you to specify the randomness",
        "default": 30
      },
      {
        "name": "delay",
        "type": "number",
        "default": null
      },
      {
        "name": "hold",
        "type": "number",
        "description": "if text is an array of strings, hold specified the duration the full will be displayed before it passes over to the next item in the array",
        "default": 2000
      },
      {
        "name": "interval",
        "type": "number",
        "description": "the interval of the typewriter",
        "default": 100
      },
      {
        "name": "random",
        "type": "boolean",
        "description": "-if random is set, the keystrokes will be performed with a certain, \"humane\" randomness",
        "default": false
      },
      {
        "name": "sound",
        "type": "boolean",
        "description": "the typed keystroke will be also heard",
        "default": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "text",
        "type": "string",
        "description": "the full text to be displayed",
        "default": ""
      }
    ],
    "description": "An ISLE component that allows you to create a typewriter effect."
  },
  "Unveil": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the counter should be active",
        "default": false
      },
      {
        "name": "delay",
        "type": "number",
        "description": "number of milliseconds before component appears",
        "default": 1000
      }
    ],
    "description": "The appear component will cause all of its children to become visible after a specified amount of time."
  },
  "VictoryAnimation": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryArea": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryAxis": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryBar": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryBrushContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryChart": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryCursorContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryErrorBar": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryGroup": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLabel": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLegend": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLine": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryPie": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryScatter": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryStack": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryTheme": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryTooltip": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryVoronoiContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryVoronoi": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryWrapper": {
    "props": [
      {
        "name": "height",
        "type": "number",
        "default": null
      },
      {
        "name": "width",
        "type": "number",
        "default": null
      }
    ],
    "description": "Description is missing."
  },
  "VictoryZoomContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VideoPlayer": {
    "props": [
      {
        "name": "url",
        "type": "string",
        "description": "URL of the video",
        "default": ""
      },
      {
        "name": "controls",
        "type": "boolean",
        "description": "indicates whether to display control elements of the video player",
        "default": false
      },
      {
        "name": "playing",
        "type": "boolean",
        "description": "indicates whether to automatically start playing the video",
        "default": false
      },
      {
        "name": "volume",
        "type": "number",
        "description": "volume of the player",
        "default": 0.8
      },
      {
        "name": "center",
        "type": "boolean",
        "description": "controls whether to center the video player",
        "default": true
      },
      {
        "name": "height",
        "type": "(string|number)",
        "description": "height of the player",
        "default": 360
      },
      {
        "name": "width",
        "type": "(string|number)",
        "description": "width of the player",
        "default": 640
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": "controls whether to start the video anew after it was played",
        "default": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "startTime",
        "type": "number",
        "description": "number of seconds at which to start the video, or fraction if value is between 0 and 1",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "onEnded",
        "type": "function",
        "description": "callback invoked once the video ends",
        "default": "onEnded() {}"
      },
      {
        "name": "onPause",
        "type": "function",
        "description": "callback invoked once the video pauses",
        "default": "onPause() {}"
      },
      {
        "name": "onPlay",
        "type": "function",
        "description": "callback invoked once the video starts or resumes playing after pausing",
        "default": "onPlay() {}"
      }
    ],
    "description": "A component for playing media files and content from YouTube, SoundCloud, and Vimeo."
  },
  "VoiceControl": {
    "props": [
      {
        "name": "id",
        "type": "string",
        "description": "unique identifier",
        "default": null
      },
      {
        "name": "commands",
        "type": "array (required)",
        "description": "array of voice commands"
      },
      {
        "name": "hide",
        "type": "boolean",
        "description": "controls whether to hide control elements for toggling on/off voice control and display a list of available commands",
        "default": false
      },
      {
        "name": "reference",
        "type": "object (required)",
        "description": "reference object"
      }
    ],
    "description": "Component to register a reference with the speech control interface."
  },
  "Weather": {
    "props": [
      {
        "name": "key",
        "type": "string",
        "description": "APIXU key",
        "default": "<number>"
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "default": "en-US"
      },
      {
        "name": "location",
        "type": "string",
        "description": "location name",
        "default": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "default": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      }
    ],
    "description": "A component for displaying the current weather at a designated location."
  },
  "Wikipedia": {
    "props": [
      {
        "name": "invisible",
        "type": "boolean",
        "description": "controls whether to display a text input field to search for Wikipedia articles",
        "default": false
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "default": "en-US"
      }
    ],
    "description": "The **Wikipedia** component scans the **Wikipedia** and returns an article - if anything valid is found under the entered search tem."
  },
  "WordCloud": {
    "props": [
      {
        "name": "data",
        "type": "array",
        "description": "either an array of texts from which to generate the word cloud or, if `precalculated` is set to `true`, and array of word count objects (with `text` and `value` keys)",
        "default": []
      },
      {
        "name": "font",
        "type": "(string|function)",
        "description": "accessor function specifying the font face for each word. Also accepts a constant instead of a function",
        "default": "serif"
      },
      {
        "name": "fontSizeMapper",
        "type": "function",
        "description": "accessor function indicating the font size for each word. Defaults to `( count - min ) / ( max - min ) * 36.0 + 14.0`, where `min` and `max` denote the minimum and maximum word `counts`, respectively",
        "default": null
      },
      {
        "name": "height",
        "type": "number",
        "description": "height of the word clloud (in px)",
        "default": 600
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier (determines the stopwords to be removed)",
        "default": "en"
      },
      {
        "name": "minCount",
        "type": "number",
        "description": "if set, only include words that appear more than `minCount` times in the given data",
        "default": null
      },
      {
        "name": "saveButton",
        "type": "boolean",
        "description": "controls whether to display a button for saving the word cloud as an image",
        "default": true
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when a word on the word cloud is clicked",
        "default": "onClick() {}"
      },
      {
        "name": "padding",
        "type": "(function|number)",
        "description": "accessor function or constant indicating the numerical padding for each word",
        "default": 5
      },
      {
        "name": "precalculated",
        "type": "boolean",
        "description": "controls whether the word cloud expects an array of precalculated word counts or will generate them for given texts",
        "default": false
      },
      {
        "name": "rotate",
        "type": "(function|number)",
        "description": "accessor function indicating the rotation angle (in degrees) for each word. Also accepts a constant instead of a function",
        "default": "word => word.value % 360"
      },
      {
        "name": "updateThreshold",
        "type": "number",
        "description": "batch size of new documents in `data` before the word cloud is re-rendered",
        "default": 5
      },
      {
        "name": "triggerRender",
        "type": "boolean",
        "description": "rerender when the data set is exchanged",
        "default": true
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "default": {}
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the word cloud (in px)",
        "default": 700
      }
    ],
    "description": "A word cloud component built on top of [d3-cloud](https://github.com/jasondavies/d3-cloud)."
  }
}
// MODULES //

const md = require( 'markdown-it' )({
	html: true,
	xhtmlOut: true,
	breaks: true,
	typographer: false
});


// VARIABLES //

var divHash = {};


// FUNCTIONS //

function tokenize( str ) {
	const arr = [];
	let inOpeningTag = false;
	let inClosingTag = false;
	let braceLevel = 0;
	let current = '';
	let level = 0;

	for ( let i = 0; i < str.length; i++ ) {
		let char = str.charAt( i );

		if ( inOpeningTag ) {
			if ( char === '{' ) {
				braceLevel += 1;
			}
			else if ( char === '}' ) {
				braceLevel -= 1;
			}
		}
		if ( braceLevel > 0 && inOpeningTag ) {
			current += char;
		}
		else if ( level === 0 ) {
			if ( char === '<' ) {
				inOpeningTag = true;
				arr.push( current );
				current = char;
				level += 1;
			} else {
				current += char;
			}
		}
		else {
			current += char;
			if ( char === '>' && str.charAt( i-1 ) === '/' ) {
				inOpeningTag = false;
				level -= 1;
				if ( level === 0 ) {
					divHash[ '<div id="placeholder_'+i+'"/>' ] = current;
					arr.push( '<div id="placeholder_'+i+'"/>' );
					current = '';
				}
			} else if ( char === '>' && inClosingTag ) {
				level -= 1;
				inClosingTag = false;
				if ( level === 0 ) {
					divHash[ '<div id="placeholder_'+i+'"/>' ] = current;
					arr.push( '<div id="placeholder_'+i+'"/>' );
					current = '';
				}
			} else if ( char === '<' ) {
				if ( str.charAt( i+1 ) !== '/' ) {
					level += 1;
				} else {
					inClosingTag = true;
				}
			}
		}
	}
	return arr;
} // end FUNCTION tokenize()


// MAIN //

function toMarkdown( str ) {
	const arr = tokenize( str );

	str = arr.join( '' );
	str = md.render( str );

	for ( let key in divHash ) {
		str = str.replace( key, divHash[ key ] );
	}
	return str;
} // end FUNCTION toMarkdown()


// EXPORTS //

export default toMarkdown;

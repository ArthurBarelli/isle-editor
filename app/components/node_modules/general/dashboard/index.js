// MODULES //

import React, { Component, PropTypes } from 'react';
import { Button } from 'react-bootstrap';
import NumberInput from 'general/number-input';


// CONSTANTS //

// This kind of Componenet need be ignored, works with react-dom and react-native.
const IGNORED_COMPONENTS = [ 'StatelessComponent', 'Constructor', 'AnimatedComponent' ];


// FUNCTIONS //

/**
* Search all child-component in node-tree structure
*
* @param node      search from
* @param childType child type
* @returns {(Array|null)}
*/
function findAllChildren( node, childType ) {
	let children = _getAllChildren( node );
	return _filterComponent( children, childType );
}

// get all children Component by recursion
function _getAllChildren( node ) {
	if ( node instanceof Component ) {
		node = node._reactInternalInstance;
	}
	let children = [];
	if ( node._renderedComponent ) {
		children.push( node._renderedComponent );
		let deeper = _getAllChildren( node._renderedComponent );
		( deeper && deeper.length ) && ( children = children.concat( deeper ) );
	} else if ( node._renderedChildren ) {
		for ( let key in node._renderedChildren ) {
			if ( node._renderedChildren.hasOwnProperty( key ) && key.indexOf( '.' ) == 0 ) {
				let child = node._renderedChildren[ key ];
				children.push( child );
				let deeper = _getAllChildren( child );
				( deeper && deeper.length ) && ( children = children.concat( deeper ) );
			}
		}
	}
	return children;
}

// filter the component that we really need.
function _filterComponent( nodes, childType ) {
	let result = null;
	if ( nodes && nodes.length ) {
		let filterResult = [];
		nodes.forEach( function( item ) {
			let instance = _getValidComponent( item );
			if ( instance && ( !childType || ( instance instanceof childType ) ) ) {
				filterResult.push( instance );
			}
		});
		if ( filterResult.length ) {
			result = filterResult;
		}
	}
	return result;
}

/**
* Get valid component and ignore common component. If node is ReactCompositeComponentWrapper, get _instance.
*
* @private
*/
function _getValidComponent( node ) {
	if ( node && node.constructor.name == 'ReactCompositeComponentWrapper' ) {
		node = node._instance;
	}
	if ( node && IGNORED_COMPONENTS.indexOf( node.constructor.name ) >= 0 ) {
		node = null;
	}
	return node;
}


// DASHBOARD //

class Dashboard extends Component {

	constructor() {
		super();

		this.handleClick = () => {
			let inputs = findAllChildren( this, NumberInput );
			let args = inputs.map( v => v.state.value );
			this.props.onGenerate( ...args );
		};
	}

	render() {
		return (
			<div className="dashboard" style={{
				padding: '5px',
				border: '2px solid darkgrey',
				background: 'white',
				width: '36%'
			}}>
				{this.props.children}
				<Button
					bsStyle="info"
					style={{
						marginTop: '24px'
					}}
					onClick={this.handleClick}
				>Generate</Button>
			</div>
		);
	}
}


// DEFAULT PROPERTIES //

Dashboard.defaultProps = {
	onGenerate: function(){}
};


// PROPERTY TYPES //

Dashboard.propTypes = {
	onGenerate: PropTypes.func,
	description: PropTypes.string,
	title: PropTypes.string
};


// EXPORTS //

export default Dashboard

// MODULES //

import React, { PropTypes } from 'react';
import ReactDom from 'react-dom';
import Dimensions from 'react-dimensions';
import { Button } from 'react-bootstrap';

// Handle bug occuring when crypto-browserify is used with Webpack...
global._crypto = {};
import request from 'request';

import ace from 'brace';
import 'brace/mode/r';
import 'brace/theme/katzenmilch';


// CONSTANTS //

const OPEN_CPU = 'https://public.opencpu.org';
const OPEN_CPU_POST = '/ocpu/library/base/R/identity/identity-d';
const GRAPHICS_REGEX = /graphics/;
const STDOUT_REGEX = /stdout/;


// FUNCTIONS //

const calculateMargin = ( containerWidth ) => {
	let sizeType = 0;
	if ( containerWidth <= 1400 && containerWidth >= 1024 ) {
		sizeType = 1;
	}
	else if ( containerWidth < 1024 && containerWidth >= 800 ) {
		sizeType = 2;
	}
	else if ( containerWidth < 800 ) {
		sizeType = 3;
	}
	switch( sizeType ) {
	case 0:
		return {
			width: containerWidth * 0.6,
			margin: ( containerWidth - ( containerWidth * 0.6 ) ) / 2.0
		};
	case 1:
		return {
			width: containerWidth * 0.7,
			margin: ( containerWidth - ( containerWidth * 0.7 ) ) / 2.0
		};
	case 2:
		return {
			width: containerWidth * 0.8,
			margin: ( containerWidth - ( containerWidth * 0.8 ) ) / 2.0
		};
	case 3:
		return {
			width: containerWidth * 0.9,
			margin: ( containerWidth - ( containerWidth * 0.9 ) ) / 2.0
		};
	}
};

const insertImages = ( imgs, containerWidth ) => {
	const ret = [];
	const { width, margin } = calculateMargin( containerWidth );
	for ( let i = 0; i < imgs.length; i++ ) {
		ret[ i ] = ( <img
			key={i}
			style={{
				marginLeft: margin,
				marginRight: margin,
				width,
				height: 'auto'
			}}
			role="presentation" src={imgs[ i ]}
		></img> );
	}
	return ret;
};

const showResult = ( res ) => res ? <pre id="output">{res}</pre> : <span />;


// R SHELL //

class RShell extends React.Component {
	constructor( props ) {
		super( props );

		this.state = {
			result: '',
			plots: [],
			windowWidth: window.innerWidth
		};

		this.insertPlot = ( url, id ) => {
			const { width, margin } = calculateMargin( this.props.containerWidth );
			return ( <img
				key={id}
				style={{
					marginLeft: margin,
					marginRight: margin,
					width,
					height: 'auto'
				}}
				role="presentation" src={url}
			></img> );
		};

		this.handleClick = () => {
			this.setState({
				result: '',
				plots: []
			});
			const currentCode = this.editor.getValue();
			request.post( OPEN_CPU + OPEN_CPU_POST, {
				form: {
					x: currentCode
				}
			}, ( error, response, body ) => {
				const arr = body.split( '\n' );
				const plots = [];
				if ( !error ) {
					arr.forEach( elem => {
						if ( GRAPHICS_REGEX.test( elem ) === true ) {
							const imgURL = OPEN_CPU + elem;
							plots.push( imgURL );
						}
						if ( STDOUT_REGEX.test( elem ) === true ) {
							request.get( OPEN_CPU + elem, ( err, getResponse, getBody ) => {
								this.setState({ result: getBody });
								this.props.onResult( this.state.result );
							});
						}
					});
					this.setState({
						plots
					});
				}
			});
		};
	}

	componentDidMount() {
		this.editor = ace.edit( ReactDom.findDOMNode( this ).firstChild );
		this.editor.getSession().setMode( 'ace/mode/r' );
		this.editor.setTheme( 'ace/theme/katzenmilch' );
		this.editor.$blockScrolling = Infinity;
		this.editor.setValue( this.props.code );
		this.editor.setOptions({
			maxLines: this.props.lines,
			minLines: this.props.lines,
			fontFamily: this.props.fontFamily,
			fontSize: this.props.fontSize
		});
		this.editor.getSession().setUseWrapMode( true );
	}

	handleResize() {}

	render() {
		return (
			<div className="RShell" style={{ padding: '5px', border: '2px solid lightblue' }}>
				<div id="ace"></div>
				<Button
					bsStyle="info"
					bsSize="sm"
					style={{
						marginTop: '8px',
						marginBottom: '8px'
					}}
					onClick={this.handleClick}
				>Evaluate</Button>
				<div id="output">
					{showResult( this.state.result )}
					{insertImages( this.state.plots, this.props.containerWidth )}
				</div>
			</div>
		);
	}
}


// PROPERTY TYPES //

RShell.propTypes = {
	onResult: PropTypes.func,
	code: PropTypes.string,
	lines: PropTypes.number,
	fontFamily: PropTypes.string,
	fontSize: PropTypes.number
};


// DEFAULT PROPERTIES //

RShell.defaultProps = {
	onResult() { },
	code: '',
	lines: 5,
	fontSize: 16,
	fontFamily: 'Courier New'
};


// EXPORTS //

export default Dimensions({
	elementResize: true
})( RShell );

// MODULES //

import React, { Component, PropTypes } from 'react';
import Dimensions from 'general/dimensions';
import { Table, Column, Cell } from 'fixed-data-table';
import { Button, Modal } from 'react-bootstrap';
import request from 'request';
import Spinner from 'general/spinner';
import floor from '@stdlib/math/base/special/floor';
import isArray from '@stdlib/utils/is-array';


// CONSTANTS //

const OPEN_CPU = 'https://public.opencpu.org';
const OPEN_CPU_POST = '/ocpu/library/base/R/identity/identity-d';
const STDOUT_REGEX = /stdout/;


// FUNCTIONS //

const createTable = ( data, { containerWidth, columnWidth, maxHeight }) => {
	const keys = Object.keys( data[ 0 ]);
	if ( !columnWidth ) {
		columnWidth = floor( ( 0.5 * containerWidth - 15 ) / keys.length );
	}
	return (
		<Table
			rowHeight={30}
			rowsCount={data.length}
			width={ 0.5 * containerWidth }
			maxHeight={maxHeight}
			headerHeight={30}
		>
		{keys.map( ( key, idx ) => {
			return (
				<Column
					header={<Cell>{key}</Cell>}
					cell={({rowIndex, ...props}) => (
						<Cell {...props}>
							{ data[ rowIndex ][ key ] }
						</Cell>
					)}
					width={ isArray( columnWidth ) ? columnWidth[ idx ] : columnWidth }
				>
				</Column>
			);
		})}
		</Table>
	);
};


// R TABLE //

class RTable extends Component {

	constructor( props ) {
		super( props );

		this.state = {
			data: null,
			last: ''
		};
	}

	getTable() {
		if ( this.props.code !== this.state.last ) {
			this.setState({
				waiting: true,
				last: this.props.code,
			});
			let jsonCode = 'library( jsonlite );\n';
			jsonCode += this.props.code.replace( /; ([A-Z]*)$/i, '; toJSON($1)' );
			request.post( OPEN_CPU + OPEN_CPU_POST, {
				form: {
					x: jsonCode
				}
			}, ( error, response, body ) => {
				if ( !error ) {
					const arr = body.split( '\n' );
					for ( let i = 0; i < arr.length; i++ ) {
						let elem = arr[ i ];
						if ( STDOUT_REGEX.test( elem ) === true ) {
							request.get( OPEN_CPU + elem, ( err, getResponse, getBody ) => {
								this.setState({
									data: JSON.parse( getBody ),
									waiting: false
								});
							});
							break;
						}
					}
				}
			});
		}
	}

	componentDidMount() {
		this.getTable();
	}

	componentDidUpdate() {
		this.getTable();
	}

	render() {
		const margin =  ( this.props.containerWidth * 0.5 ) / 2.0;
		return (
			<div className="rplot" style={{
			}}>
				<Spinner running={this.state.waiting} width={256} height={128}/>
				{ this.state.data ?
					<div
						style={{
							marginLeft: margin,
							marginRight: margin,
							marginTop: '10px',
							marginBottom: '10px'
						}}
					>
						{createTable( this.state.data, this.props )}
					</div> :
					<span />
				}
			</div>
		);
	}

}


// PROPERTY TYPES //

RTable.propTypes = {
	code: PropTypes.string,
	maxHeight: PropTypes.number,
	columnWidth: PropTypes.oneOfType([
		PropTypes.number,
		PropTypes.arrayOf( PropTypes.number )
	])
};


// DEFAULT PROPERTIES //

RTable.defaultProps = {
	code: '',
	maxHeight: 400,
	columnWidth: null
};


// EXPORTS //

export default Dimensions( RTable );

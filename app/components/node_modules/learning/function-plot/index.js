// MODULES //

import React, { Component, PropTypes } from 'react';
import Dimensions from 'react-dimensions';
import functionPlot from 'function-plot';
import isFunction from '@stdlib/utils/is-function';


// FUNCTIONS //

const calculateMargin = ( containerWidth, targetWidth ) => {
	const x = ( containerWidth - targetWidth ) / 2.0;
	return `${x | 0}px`;
};

const processData = ( d ) => {
	const dat = Object.assign({}, d );
	if ( isFunction( dat.fun ) ) {
		if ( !dat.graphType ) {
			dat.graphType = 'polyline';
		}
		dat._fn = dat.fun;
		dat.fn = function wrapper( scope ) {
			return dat._fn( scope.x );
		};
	}
	if ( dat.points ) {
		if ( !dat.graphType ) {
			dat.graphType = 'scatter';
		}
		if ( !dat.fnType ) {
			dat.fnType = 'points';
		}
	}
	return dat;
};


// FUNCTION PLOT //

class FunctionPlot extends Component {

	constructor( props ) {
		super( props );

		this.state = {
			_data: this.props.data.map( processData )
		};
	}
	/**
	* After initial rendering, invoke `functionPlot` and render to DIV.
	*/
	componentDidMount() {
		functionPlot({
			target: '#' + this.props.id,
			width: this.props.width,
			height: this.props.height,
			disableZoom: this.props.disableZoom,
			data: this.state._data
		});
	}
	handleResize() {}
	/**
	* React component render method.
	*/
	render() {
		return (
			<div
				className="functionPlot"
				id={this.props.id}
				style={{
					marginLeft: calculateMargin( this.props.containerWidth, this.props.width ),
					marginRight: calculateMargin( this.props.containerWidth, this.props.width )
				}}
			></div>
		);
	}
}


// PROPERTY TYPES //

FunctionPlot.propTypes = {
	data: PropTypes.array.isRequired,
	width: PropTypes.number,
	height: PropTypes.number,
	id: PropTypes.string.isRequired,
	title: PropTypes.string,
	disableZoom: PropTypes.bool
};


// DEFAULT PROPERTIES //

FunctionPlot.defaultProps = {
	disableZoom: true,
	title: null,
	height: 250,
	width: 250
};


// EXPORTS //

export default Dimensions({
	elementResize: true
})( FunctionPlot );

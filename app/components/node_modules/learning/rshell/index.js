// MODULES //

import React, { PropTypes } from 'react';
import ReactDom from 'react-dom';
import Dimensions from 'react-dimensions';
import { Button, ButtonToolbar, OverlayTrigger, Popover } from 'react-bootstrap';
import request from 'request';

import ace from 'brace';
import 'brace/mode/r';
import 'brace/theme/katzenmilch';

import Spinner from 'general/spinner';


// CONSTANTS //

const OPEN_CPU = 'https://public.opencpu.org';
const OPEN_CPU_POST = '/ocpu/library/base/R/identity/identity-d';
const GRAPHICS_REGEX = /graphics/;
const STDOUT_REGEX = /stdout/;
const ERR_REGEX = /\nIn call:[\s\S]*$/gm;


// FUNCTIONS //

const calculateMargin = ( containerWidth ) => {
	let sizeType = 0;
	if ( containerWidth <= 1400 && containerWidth >= 1024 ) {
		sizeType = 1;
	}
	else if ( containerWidth < 1024 && containerWidth >= 800 ) {
		sizeType = 2;
	}
	else if ( containerWidth < 800 ) {
		sizeType = 3;
	}
	switch ( sizeType ) {
	case 0:
		return {
			width: containerWidth * 0.6,
			margin: ( containerWidth - ( containerWidth * 0.6 ) ) / 2.0
		};
	case 1:
		return {
			width: containerWidth * 0.7,
			margin: ( containerWidth - ( containerWidth * 0.7 ) ) / 2.0
		};
	case 2:
		return {
			width: containerWidth * 0.8,
			margin: ( containerWidth - ( containerWidth * 0.8 ) ) / 2.0
		};
	case 3:
		return {
			width: containerWidth * 0.9,
			margin: ( containerWidth - ( containerWidth * 0.9 ) ) / 2.0
		};
	}
};

const insertImages = ( imgs, containerWidth ) => {
	const ret = [];
	const { width, margin } = calculateMargin( containerWidth );
	for ( let i = 0; i < imgs.length; i++ ) {
		ret[ i ] = ( <img
			key={i}
			style={{
				marginLeft: margin,
				marginRight: margin,
				width,
				height: 'auto'
			}}
			role="presentation" src={imgs[ i ]}
		></img> );
	}
	return ret;
};

const requireLibs = ( libs ) => {
	return libs.map( x => 'library(' + x + ');' )
		.join( ' ' );
};

const showResult = ( res ) => res ? <pre id="output">{res}</pre> : <span />;

const displayHint = ( id, hints ) => {
	return (
		<Popover id="popover-positioned-top" title="Hint">
			{ hints[ id ] }
		</Popover>
	);
};

const showSolutionButton = ( currentHint, nHints, clickHandler ) => {
	if ( currentHint < nHints ) {
		return (
			<Button
				bsStyle="warning"
				bsSize="sm"
				disabled
			>Toggle Solution</Button>
		);
	} else {
		return (
			<Button
				bsStyle="warning"
				bsSize="sm"
				onClick={clickHandler}
			>Toggle Solution</Button>
		);
	}
};


// R SHELL //

class RShell extends React.Component {
	constructor( props ) {
		super( props );

		this.state = {
			result: '',
			plots: [],
			running: false,
			currentHint: 0,
			hintOpen: false,
			windowWidth: window.innerWidth
		};

		this.insertPlot = ( url, id ) => {
			const { width, margin } = calculateMargin( this.props.containerWidth );
			return ( <img
				key={id}
				style={{
					marginLeft: margin,
					marginRight: margin,
					width,
					height: 'auto'
				}}
				role="presentation" src={url}
			></img> );
		};

		this.handleSolutionClick = () => {
			const val = this.editor.getValue();
			if ( val !== this.props.solution ) {
				this.setState({
					lastSolution: val
				});
				this.editor.setValue( this.props.solution );
			} else {
				this.editor.setValue( this.state.lastSolution );
			}
		};

		this.handleHintClick = () => {
			const { currentHint, hintOpen } = this.state;
			const { hints } = this.props;
			if ( currentHint < hints.length && hintOpen === false ) {
				this.setState({
					currentHint: currentHint + 1,
					hintOpen: true
				});
			} else {
				this.setState({
					hintOpen: !this.state.hintOpen
				});
			}
		};

		this.handleEvaluationClick = () => {
			this.setState({
				result: '',
				plots: [],
				running: true
			});
			let currentCode = this.editor.getValue();

			if ( this.props.id ) {
				global.session.log({
					id: this.props.id,
					type: 'RSHELL_EVALUATION',
					value: currentCode
				});
			}

			currentCode = requireLibs( this.props.libraries ) + currentCode;

			request.post( OPEN_CPU + OPEN_CPU_POST, {
				form: {
					x: currentCode
				}
			}, ( error, response, body ) => {
				const arr = body.split( '\n' );
				const plots = [];
				if ( !error && response.statusMessage !== 'Bad Request' ) {
					arr.forEach( elem => {
						if ( GRAPHICS_REGEX.test( elem ) === true ) {
							const imgURL = OPEN_CPU + elem;
							plots.push( imgURL );
						}
						if ( STDOUT_REGEX.test( elem ) === true ) {
							request.get( OPEN_CPU + elem, ( err, getResponse, getBody ) => {
								this.setState({
									result: getBody
								});
								this.props.onResult( this.state.result );
							});
						}
					});
					this.setState({
						plots,
						running: false
					});
				} else {
					this.setState({
						result: body.replace( ERR_REGEX, '' ),
						running: false
					});
				}
			});
		};
	}

	componentDidMount() {
		this.editor = ace.edit( ReactDom.findDOMNode( this ).firstChild );
		this.editor.getSession().setMode( 'ace/mode/r' );
		this.editor.setTheme( 'ace/theme/katzenmilch' );
		this.editor.$blockScrolling = Infinity;
		this.editor.setValue( this.props.code );
		this.editor.setOptions({
			maxLines: this.props.lines,
			minLines: this.props.lines,
			fontFamily: this.props.fontFamily,
			fontSize: this.props.fontSize
		});
		this.editor.getSession().setUseWrapMode( true );
	}

	handleResize() {}

	render() {
		const nHints = this.props.hints.length;
		return (
			<div className="RShell"
				style={{
					margin: '5px',
					padding: '5px',
					border: '2px solid lightblue'
				}}
			>
				<div id="ace"></div>
				<Button
					bsStyle="primary"
					bsSize="sm"
					style={{
						marginTop: '8px',
						marginBottom: '8px'
					}}
					onClick={this.handleEvaluationClick}
				>Evaluate</Button>
				<Spinner
					running={this.state.running}
					width={60}
					height={30}
					display="inline"
					lines={12}
					style={{
						marginTop: '8px',
						marginBottom: '-12px'
					}}
				/>
				<ButtonToolbar style={{ float: 'right', marginTop: '8px' }}>
					{ nHints > 0 ?
						<OverlayTrigger
							container={this}
							trigger="click"
							placement="left"
							overlay={ displayHint( this.state.currentHint - 1, this.props.hints ) }
						>
							<Button
								bsStyle="info"
								bsSize="sm"
								onClick={this.handleHintClick}
							>Get Hint</Button>
						</OverlayTrigger> :
						null
					}
					{ this.props.solution ? showSolutionButton( this.state.currentHint, nHints, this.handleSolutionClick ) : null }
				</ButtonToolbar>
				<div id="output">
					{ showResult( this.state.result ) }
					{ insertImages( this.state.plots, this.props.containerWidth ) }
				</div>
			</div>
		);
	}
}


// PROPERTY TYPES //

RShell.propTypes = {
	onResult: PropTypes.func,
	code: PropTypes.string,
	lines: PropTypes.number,
	libraries: PropTypes.array,
	hints: PropTypes.array,
	fontFamily: PropTypes.string,
	fontSize: PropTypes.number,
	solution: PropTypes.string
};


// DEFAULT PROPERTIES //

RShell.defaultProps = {
	onResult() { },
	code: '',
	lines: 5,
	solution: '',
	libraries: [],
	hints: [],
	fontSize: 16,
	fontFamily: 'Courier New'
};


// EXPORTS //

export default Dimensions({
	elementResize: true
})( RShell );

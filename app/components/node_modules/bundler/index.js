// MODULES //

import fs from 'fs-extra';
import path from 'path';
import webpack from 'webpack';
import UglifyJS from 'uglify-js';


// VARIABLES //

const GENERAL_REQUIRES = {
	CheckboxInput: 'const CheckboxInput = require( \'general/checkbox-input\' );',
	Column: 'const Column = require( \'react-bootstrap\' ).Col;',
	Dashboard: 'const Dashboard = require( \'general/dashboard\' );',
	DensityPlot: 'const DensityPlot = require( \'learning/d3/density-plot\' );',
	Grid: 'const Grid = require( \'react-bootstrap\' ).Grid;',
	NumberInput: 'const NumberInput = require( \'general/number-input\' );',
	Row: 'const Row = require( \'react-bootstrap\' ).Row;',
	SliderInput: 'const SliderInput = require( \'general/slider-input\' );'
};

const LEARNING_REQUIRES = {
	FeedbackButtons: 'const FeedbackButtons = require( \'learning/feedback\' );',
	FunctionPlot: 'const FunctionPlot = require( \'learning/function-plot\' );',
	RHelp: 'const RHelp = require( \'learning/rhelp\' );',
	RPlot: 'const RPlot = require( \'learning/r/plot\' );',
	RShell: 'const RShell = require( \'learning/rshell\' );',
	TeX: 'const TeX = require( \'learning/tex\' );',
	Switch: 'Switch = require( \'learning/switch\' );',
	VideoPlayer: 'const VideoPlayer = require( \'learning/video-player\' );'
};

const isPackaged = !( /node_modules\/electron-prebuilt\/dist/.test( process.resourcesPath ) );
const rootPaths = [];
if ( isPackaged ) {
	rootPaths.push( `${process.resourcesPath}/app/node_modules` );
	rootPaths.push( `${process.resourcesPath}/app/app/components/node_modules/` );
	rootPaths.push( `${process.resourcesPath}/app/node_modules/@stdlib/stdlib/lib/node_modules` );
	rootPaths.push( `${process.resourcesPath}/app/node_modules/@stdlib/stdlib/node_modules` );
} else {
	rootPaths.push( path.resolve( './node_modules' ) );
	rootPaths.push( path.resolve( './node_modules/@stdlib/stdlib/lib/node_modules' ) );
	rootPaths.push( path.resolve( './node_modules/@stdlib/stdlib/node_modules' ) );
	rootPaths.push( path.resolve( './app/components/node_modules/' ) );
}


// CONFIG //

const config = {
	resolve: {
		root: rootPaths
	},
	resolveLoader: {
		root: rootPaths
	},
	module: {
		loaders: [
			{
				test: /\.js?$/,
				loader: 'babel-loader',
				exclude: isPackaged ?
					`${process.resourcesPath}/app/node_modules` :
					path.resolve( './node_modules' ),
				query: {
					plugins: [
						'add-module-exports'
					],
					presets: [
						'es2015',
						'react',
						'stage-0'
					],
					babelrc: false
				}
			},
			{
				test: /\.json$/,
				loader: 'json-loader'
			},
		],
		noParse: /node_modules\/json-schema\/lib\/validate\.js/
	},
	node: {
		fs: 'empty',
		net: 'empty',
		tls: 'empty'
	},
	plugins: [
		new webpack.DefinePlugin({
			'process.env': {
				NODE_ENV: '"production"'
			}
		}),
		new webpack.IgnorePlugin( /vertx/ ),
		new webpack.ProvidePlugin({
			'window.d3': 'd3'
		})
	],
	externals: [
		'crypto-browserify'
	]
};

// FUNCTIONS //

const contains = ( arr, value ) => {
	for ( let i = 0; i < arr.length; i++ ) {
		if ( arr[ i ] === value ) {
			return true;
		}
	}
	return false;
};

const generateIndexHTML = ( title, minify ) => `
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>${title}</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
		<link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css' />
		<link rel="stylesheet" href="styles.css" />
	</head>
	<body>
	<div id="root"></div>
	<script>
		// Handle bug occuring when crypto-browserify is used with Webpack...
		window._crypto = {};
	</script>
	<script src=${ minify ? "bundle.min.js" : "bundle.js" }></script>
	</body>
</html>
`;

const generateCSS = () => `
body {
	background-color: #fffff8;
	font-family: Inconsolata;
	margin-left: 10px;
	margin-right: 10px;
	font-size: 18px;
}

h1 {
	color: lightblue;
	font-size: 40px;
	font-weight: bold;
	letter-spacing: 1px;
	font-family: Open Sans;
}

h2 {
	font-size: 28px;
	color: darkorange;
	font-family: Open Sans;
}

h3 {
	font-size: 24px;
	color: darkred;
	font-family: Open Sans;
}

h4 {
	font-size: 18px;
	color: darkred;
	font-family: Open Sans;
}

#root {
	margin-left: auto;
	margin-right: auto;
	max-width: 1024px;
};
`;


const getMainImports = () => `
import React, { Component } from 'react';
import { render } from 'react-dom';
import assignMath from '@stdlib/namespace/lib/math';

global.std = {};
assignMath( global.std );
`;


const getLearningComponents = ( arr ) => {
	const requireStatements = arr.map( elem => LEARNING_REQUIRES[ elem ]);
	return requireStatements.join( '\n' );
};

const getGeneralComponents = ( arr ) => {
	let requireStatements = [ 'const Input = require( \'general/input\' );' ];
	requireStatements = requireStatements.concat( arr.map( elem => GENERAL_REQUIRES[ elem ]) );
	return requireStatements.join( '\n' );
};

const getLessonComponent = ( lessonContent ) => `
class Lesson extends Component {
	componentDidMount() {
		global.lesson = this;
		this.forceUpdate();
	}
	render() {
		return (
			<div>${lessonContent}</div>
		);
	}
}

render(
	<Lesson />,
	document.getElementById( 'root' )
);`;

const getComponentList = ( code ) => {
	const ret = [];
	const availableComponents = [
		'CheckboxInput',
		'Column',
		'Dashboard',
		'DensityPlot',
		'FeedbackButtons',
		'FunctionPlot',
		'Grid',
		'NumberInput',
		'RHelp',
		'RPlot',
		'Row',
		'RShell',
		'SliderInput',
		'TeX',
		'Switch',
		'VideoPlayer'
	];

	for ( let i = 0; i < availableComponents.length; i++ ) {
		const regexp = new RegExp( `<${availableComponents[ i ]}[^>]*>`, 'gi' );
		if ( regexp.test( code ) === true ) {
			ret.push( availableComponents[ i ]);
		}
	}
	return ret;
};

const getStoreCode = ( store ) => 'global.store = ' + JSON.stringify( store ) + ';';

// MAIN //

/**
* Generate contents of index.js file of lesson.
*
* @param {string} lessonContent - ISLE lesson file
* @param {Array} components - array of component names
* @param {Object} store - global lesson store
* @returns {string} index.js content
*/
function generateIndexJS( lessonContent, components, store ) {
	let res = getMainImports();
	res += '\n';
	res += getStoreCode( store );
	res += getGeneralComponents( components );
	res += getLearningComponents( components );
	res += getLessonComponent( lessonContent );
	return res;
} // end FUNCTION generateIndexJS()

/**
* Write index.js file to disk
*
* @param {string} outputPath - file path of output directory
* @param {string} lessonContent - ISLE lesson file
* @param {Object} meta - lesson meta data
* @param {boolean} minify - boolean indicating whether code should be minified
* @param {Function} clbk - callback function
*/
function writeIndexFile( outputPath, lessonContent, meta, minify, clbk ) {
	const appDir = path.join( outputPath, meta.title );
	const indexPath = isPackaged ?
		`${process.resourcesPath}/app/public/index.js` :
		path.resolve( './public/index.js' );
	const htmlPath = path.join( appDir, 'index.html' );
	const cssPath = path.join( appDir, 'styles.css' );
	const bundlePath = path.join( appDir, 'bundle.js' );

	const usedComponents = getComponentList( lessonContent );

	const str = generateIndexJS( lessonContent, usedComponents, meta.store );

	fs.writeFileSync( indexPath, str );
	fs.writeFileSync( cssPath, generateCSS() );

	if ( contains( usedComponents, 'FeedbackButtons' ) ) {
		fs.mkdirSync( path.join( appDir, 'img' ) );
		let imgPath = isPackaged ?
			`${process.resourcesPath}/app/app/img` :
			path.resolve( './app/img' );
		fs.copySync( path.join( imgPath, 'confused.svg' ), path.join( appDir, 'img', 'confused.svg' ) );
		fs.copySync( path.join( imgPath, 'feedback.svg' ), path.join( appDir, 'img', 'feedback.svg' ) );
		fs.copySync( path.join( imgPath, 'lightbulb.svg' ), path.join( appDir, 'img', 'lightbulb.svg' ) );
	}

	config.entry = indexPath;
	config.output = {
		path: appDir,
		filename: 'bundle.js'
	};
	const compiler = webpack( config );

	compiler.run( ( err, stats ) => {
		if ( err ) {
			throw err;
		}
		console.log( stats );
		fs.unlinkSync( indexPath );
		fs.writeFileSync( htmlPath, generateIndexHTML( meta.title, minify ) );

		if ( minify ) {
			const minified = UglifyJS.minify( bundlePath, {
				warnings: false,
				compress: true,
				mangle: true
			});
			fs.writeFileSync( path.join( appDir, 'bundle.min.js' ), minified.code );
		}

		clbk( err );
	});
} // end FUNCTION writeIndexFile()


// EXPORTS //

module.exports = writeIndexFile;

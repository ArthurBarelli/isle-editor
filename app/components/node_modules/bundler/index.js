// MODULES //

import fs from 'fs';
import path from 'path';
import { spawn } from 'child_process';


// VARIABLES //

const LEARNING_REQUIRES = {
	FeedbackButtons: 'const FeedbackButtons = require( \'learning/feedback\' );',
	FunctionPlot: 'const FunctionPlot = require( \'learning/function-plot\' );',
	RShell: 'const RShell = require( \'learning/rshell\' );',
	TeX: 'const TeX = require( \'learning/tex\' );',
	Switch: 'Switch = require( \'learning/switch\' );',
	VideoPlayer: 'const VideoPlayer = require( \'learning/video-player\' );'
};


// FUNCTIONS //

const generateIndexHTML = ( title ) => `
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>${title}</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
		<link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css' />
		<link rel="stylesheet" href="styles.css" />
	</head>
	<body>
	<div id="root"></div>
	<script src="bundle.js"></script>
	</body>
</html>
`;

const generateCSS = () => `
body {
	background-color: #fffff8;
	font-family: Inconsolata;
	margin-left: 10px;
	margin-right: 10px;
	font-size: 18px;
}

h1 {
	color: lightblue;
	font-size: 40px;
	font-weight: bold;
	letter-spacing: 1px;
	font-family: Open Sans;
}

h2 {
	font-size: 28px;
	color: darkorange;
	font-family: Open Sans;
}

h3 {
	font-size: 24px;
	color: darkred;
	font-family: Open Sans;
}

#root {
	margin-left: auto;
	margin-right: auto;
	max-width: 1024px;
};
`;


const getMainImports = () => `
import React, { Component } from 'react';
import { render } from 'react-dom';
import { watch } from 'watchjs';`;

const getLearningComponents = ( arr ) => {
	const requireStatements = arr.map( elem => LEARNING_REQUIRES[ elem ]);
	return requireStatements.join( '\n' );
};

const getLessonComponent = ( lessonContent ) => `
class Lesson extends Component {
	componentDidMount() {
		let self = this;
		watch( global.store, function onChange() {
			self.forceUpdate();
		});
	}
	render() {
		return (
			<div>${lessonContent}</div>
		);
	}
}

render(
	<Lesson />,
	document.getElementById( 'root' )
);`;

const getComponentList = ( code ) => {
	const ret = [];
	const availableComponents = [
		'FeedbackButtons',
		'FunctionPlot',
		'RShell',
		'TeX',
		'Switch',
		'VideoPlayer'
	];

	for ( let i = 0; i < availableComponents.length; i++ ) {
		const regexp = new RegExp( `<${availableComponents[ i ]}[^>]*>`, 'gi' );
		if ( regexp.test( code ) === true ) {
			ret.push( availableComponents[ i ]);
		}
	}
	return ret;
};

const getStoreCode = ( store ) => 'global.store = ' + JSON.stringify( store ) + ';';

// MAIN //

/**
* Generate contents of index.js file of lesson.
*
* @param {string} lessonContent - ISLE lesson file
* @param {Array} components - array of component names
* @param {Object} store - global lesson store
* @returns {string} index.js content
*/
function generateIndexJS( lessonContent, components, store ) {
	let res = getMainImports();
	res += '\n';
	res += getStoreCode( store );
	res += getLearningComponents( components );
	res += getLessonComponent( lessonContent );
	return res;
} // end FUNCTION generateIndexJS()

/**
* Write index.js file to disk
*
* @param {string} outputPath - file path of output directory
* @param {string} lessonContent - ISLE lesson file
* @param {Object} meta - lesson meta data
* @param {Function} clbk - callback function
*/
function writeIndexFile( outputPath, lessonContent, meta, clbk ) {
	const appDir = path.join( outputPath, meta.title );
	const indexPath = path.join( appDir, 'index.js' );
	const htmlPath = path.join( appDir, 'index.html' );
	const cssPath = path.join( appDir, 'styles.css' );
	const bundlePath = path.join( appDir, 'bundle.js' );

	const usedComponents = getComponentList( lessonContent );

	const str = generateIndexJS( lessonContent, usedComponents, meta.store );
	console.log( str )

	fs.mkdirSync( appDir );
	fs.writeFileSync( indexPath, str );
	fs.writeFileSync( cssPath, generateCSS() );

	const webpacker = spawn( './node_modules/.bin/webpack', [
		'--config',
		'app/components/node_modules/bundler/webpack.config.export.js',
		indexPath,
		bundlePath
	]);

	webpacker.stdout.on( 'data', ( data ) => {
		console.log( `stdout: ${data}` );
	});

	webpacker.stderr.on( 'data', ( data ) => {
		console.log( `stderr: ${data}` );
	});

	webpacker.on( 'close', ( code ) => {
		console.log( `child process exited with code ${code}` );
		fs.unlinkSync( indexPath );
		fs.writeFileSync( htmlPath, generateIndexHTML( meta.title ) );
		clbk( code );
	});
} // end FUNCTION writeIndexFile()


// EXPORTS //

module.exports = writeIndexFile;

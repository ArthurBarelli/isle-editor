// MODULES //

import React, { PropTypes } from 'react';
import ReactDom from 'react-dom';
import { Button } from 'react-bootstrap';
import request from 'request';
import ace from 'brace';
import 'brace/mode/r';
import 'brace/theme/katzenmilch';


// CONSTANTS //

const OPEN_CPU = 'https://public.opencpu.org';
const OPEN_CPU_POST = '/ocpu/library/base/R/identity/identity-d';
const GRAPHICS_REGEX = /graphics/;
const STDOUT_REGEX = /stdout/;


// FUNCTIONS //

const insertPlot = ( url, id ) => <img key={id} role="presentation" src={url}></img>;

const showResult = ( res ) => res ? <pre id="output">{res}</pre> : <span />;


// R SHELL //

class RShell extends React.Component {
	constructor( props ) {
		super( props );

		this.state = {
			result: '',
			plots: []
		};

		this.handleClick = () => {
			this.setState({
				result: '',
				plots: []
			});
			const currentCode = this.editor.getValue();
			request.post( OPEN_CPU + OPEN_CPU_POST, {
				form: {
					x: currentCode
				}
			}, ( error, response, body ) => {
				const arr = body.split( '\n' );
				const plots = [];
				if ( !error ) {
					arr.forEach( elem => {
						if ( GRAPHICS_REGEX.test( elem ) === true ) {
							const imgURL = OPEN_CPU + elem;
							plots.push( imgURL );
						}
						if ( STDOUT_REGEX.test( elem ) === true ) {
							request.get( OPEN_CPU + elem, ( err, getResponse, getBody ) => {
								this.setState({ result: getBody });
								this.props.onResult( this.state.result );
							});
						}
					});
					this.setState({
						plots
					});
				}
			});
		};
	}

	componentDidMount() {
		this.editor = ace.edit( ReactDom.findDOMNode( this ).firstChild );
		this.editor.getSession().setMode( 'ace/mode/r' );
		this.editor.setTheme( 'ace/theme/katzenmilch' );
		this.editor.$blockScrolling = Infinity;
		this.editor.setValue( this.props.code );
		this.editor.setOptions({
			maxLines: this.props.lines,
			minLines: this.props.lines,
			fontFamily: this.props.fontFamily,
			fontSize: this.props.fontSize
		});
		this.editor.getSession().setUseWrapMode( true );
	}
	render() {
		return (
			<div className="RShell" style={{ padding: '5px', border: '2px solid #73AD21' }}>
				<div id="ace"></div>
				<Button
					bsStyle="success"
					bsSize="sm"
					style={{ marginTop: '5px' }}
					onClick={this.handleClick}
				>Evaluate</Button>
				<div id="output">
					{showResult( this.state.result )}
					{this.state.plots.map( insertPlot )}
				</div>
			</div>
		);
	}
}


// PROPERTY TYPES //

RShell.propTypes = {
	onResult: PropTypes.func,
	code: PropTypes.string,
	lines: PropTypes.number,
	fontFamily: PropTypes.string,
	fontSize: PropTypes.number
};


// DEFAULT PROPERTIES //

RShell.defaultProps = {
	onResult() { },
	code: '',
	lines: 5,
	fontSize: 16,
	fontFamily: 'Inconsolata'
};


// EXPORTS //

export default RShell;

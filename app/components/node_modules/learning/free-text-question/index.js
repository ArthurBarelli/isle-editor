// MODULES //

import React, { Component, PropTypes } from 'react';
import { Button, ButtonToolbar, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap';
import Dimensions from 'general/dimensions';


// FREE-FORM QUESTION //

class FreeTextQuestion extends Component {
	/**
	* Create a free-form question with a text input field.
	*
	* @param {Object} props
	*/
	constructor( props ) {
		super( props );

		// Initialize state variables...
		this.state = {
			value: '',
			solutionDisplayed: false,
			submitted: false
		};

		/*
		* Event handler invoked when text area value changes. Updates `value` and invokes
		* `onChange` callback with the new text as its first argument
		*/
		this.handleChange = ( event ) => {
			const newValue = event.target.value;
			this.setState({ value: newValue });
			this.props.onChange( newValue );
		};

		this.submitHandler = ( event ) => {
			this.setState({
				submitted: true
			});
			if ( this.props.id ) {
				global.ISLE.session.log({
					id: this.props.id,
					type: 'FREE_TEXT_QUESTION_SUBMIT_ANSWER',
					value: this.state.value
				});
			}
			global.lesson.addNotification({
				title: 'Answer submitted.',
				message: 'Compare your answer with solution using the "Show Solution" button.',
				level: 'success',
				position: 'tr'
			});
		};

		this.handleSolutionClick = () => {
			if ( this.state.solutionDisplayed ) {
				this.setState({
					solutionDisplayed: false,
					value: this.state.studentAnswer
				});
			} else {
				this.setState({
					solutionDisplayed: true,
					studentAnswer: this.state.value,
					value: this.props.solution
				});
			}
		};
	}

	/*
	* React component render method.
	*/
	render() {
		const nHints = this.props.hints.length;
		const tooltip = (
			<Tooltip
				id="tooltip"
			>
				Solution becomes available after answer is submitted.
			</Tooltip>
		);

		return (
			<div className="FreeFormQuestion"
				style={{
					margin: '5px',
					padding: '5px',
					border: '2px solid lightblue',
					width: this.props.containerWidth,
				}}
			>
				<label>{ this.state.solutionDisplayed ? 'Solution:' : 'Your answer:' } </label>
				<FormControl
					componentClass="textarea"
					placeholder="Enter your answer here..."
					onChange={this.handleChange}
					style={{
						resize: this.props.resizable ? 'both' : 'none'
					}}
					rows={this.props.rows}
					value={this.state.value}
					disabled={this.state.submitted}
				/>
				{
					!this.state.submitted && this.state.value.length >= 2 ?
						<Button
							bsStyle="primary"
							bsSize="sm"
							style={{
								marginTop: '8px',
								marginBottom: '8px'
							}}
							onClick={this.submitHandler}
						>Submit</Button> :
						<Button
							bsStyle="primary"
							bsSize="sm"
							style={{
								marginTop: '8px',
								marginBottom: '8px'
							}}
							disabled
						>Submit</Button>
				}

				<ButtonToolbar style={{ marginTop: '8px', marginBottom: '4px', float: 'right' }}>
					{ nHints > 0 ?
						<OverlayTrigger
							trigger="click"
							placement="left"
							overlay={ displayHint( this.state.currentHint - 1, this.props.hints ) }
						>
							<Button
								bsStyle="info"
								bsSize="sm"
								onClick={this.handleHintClick}
								disabled={this.state.disabled}
							>{getHintLabel( this.state.currentHint, this.props.hints.length, this.state.hintOpen )}</Button>
						</OverlayTrigger> :
						null
					}
					{
						this.state.submitted ?
							<Button
								bsStyle="warning"
								bsSize="sm"
								onClick={this.handleSolutionClick}
							>{ !this.state.solutionDisplayed ? 'Show Solution' : 'Hide Solution' }</Button> :
							<OverlayTrigger
								placement="top"
								positionLeft={100}
								overlay={tooltip}
								rootClose={true}
							>
								<Button
									bsStyle="warning"
									bsSize="sm"
									disabled
								>{ !this.state.solutionDisplayed ? 'Show Solution' : 'Hide Solution' }</Button>
							</OverlayTrigger>
					}
				</ButtonToolbar>
			</div>
		);
	}
}


// DEFAULT PROPERTIES //

FreeTextQuestion.defaultProps = {
	hints: [],
	onChange() {},
	legend: '',
	resizable: false,
	rows: 5
};


// PROPERTY TYPES //

FreeTextQuestion.propTypes = {
	hints: PropTypes.array,
	onChange: PropTypes.func,
	legend: PropTypes.string,
	resizable: PropTypes.bool,
	rows: PropTypes.number
};


// EXPORTS //

export default Dimensions( FreeTextQuestion );

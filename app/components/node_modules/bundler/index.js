// MODULES //

import fs from 'fs';
import path from 'path';
import { spawn } from 'child_process';


// VARIABLES //

const LEARNING_REQUIRES = {
	feedback: 'const FeedbackButtons = require( \'learning/feedback\' );',
	'function-plot': 'const FunctionPlot = require( \'learning/function-plot\' );',
	rshell: 'const RShell = require( \'learning/rshell\' );',
	tex: 'const TeX = require( \'learning/tex\' );',
	switch: 'Switch = require( \'learning/switch\' );',
	'video-player': 'const VideoPlayer = require( \'learning/video-player\' );'
};


// FUNCTIONS //

const generateIndexHTML = ( title ) => `
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>${title}</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css">
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">
	</head>
	<body>
	<div id="root"></div>
	<script src="bundle.js"></script>
	</body>
</html>
`;

const getMainImports = () => `
import React, { Component } from 'react';
import { render } from 'react-dom';
import { watch } from 'watchjs';`;

const getLearningComponents = ( arr ) => {
	const requireStatements = arr.map( elem => LEARNING_REQUIRES[ elem ] );
	return requireStatements.join( '\n' );
};

const getLessonComponent = ( lessonContent ) => `
class Lesson extends Component {
	componentDidMount() {
		let self = this;
		watch( global.store, function onChange() {
			self.forceUpdate();
		});
	}
	render() {
		return (
			<div>${lessonContent}</div>
		);
	}
}

render(
	<Lesson />,
	document.getElementById( 'root' )
);`;


// MAIN //

/**
* Generate contents of index.js file of lesson.
*
* @param {string} lessonContent - ISLE lesson file
* @param {Array} components - array of component names
* @returns {string} index.js content
*/
function generateIndexJS( lessonContent, components ) {
	let res = getMainImports();
	res += '\n';
	res += getLearningComponents( components );
	res += getLessonComponent( lessonContent );
	return res;
} // end FUNCTION generateIndexJS()

/**
* Write index.js file to disk
*
* @param {string} outputPath - file path of output directory
* @param {string} lessonContent - ISLE lesson file
* @param {Object} meta - lesson meta data
*/
function writeIndexFile( outputPath, lessonContent, meta ) {
	const appDir = path.join( outputPath, meta.name );
	const indexPath = path.join( appDir, 'index.js' );
	const htmlPath = path.join( appDir, 'index.html' );
	const bundlePath = path.join( appDir, 'bundle.js' );

	const str = generateIndexJS( lessonContent, meta.components );

	fs.mkdirSync( appDir );
	fs.writeFileSync( indexPath, str );

	const webpacker = spawn( './node_modules/.bin/webpack', [
		'--config',
		'app/components/node_modules/bundler/webpack.config.export.js',
		indexPath,
		bundlePath
	]);

	webpacker.stdout.on( 'data', ( data ) => {
		console.log( `stdout: ${data}` );
	});

	webpacker.stderr.on( 'data', ( data ) => {
		console.log( `stderr: ${data}` );
	});

	webpacker.on( 'close', ( code ) => {
		console.log( `child process exited with code ${code}` );
		fs.unlinkSync( indexPath );
		fs.writeFileSync( htmlPath, generateIndexHTML( meta.name ) );
	});
} // end FUNCTION writeIndexFile()


// EXPORTS //

module.exports = writeIndexFile;
